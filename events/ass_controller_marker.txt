###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###


# ZZZ
# The following log lines demonstrate why we can't rely on event targets
# in delayed event chains. So that's why we use the relation flag to
# locate the military marker again in immediate.

# log = "[ass_target.GetName]: Spawning military station after 85 days."
# 34. Big Bazoom: Spawning military station after 85 days.
# 34. Big Bazoom: Spawning military station after 85 days.
# 34. Big Bazoom: Spawning military station after 85 days.
# 34. Big Bazoom: Spawning military station after 85 days.
# 34. Big Bazoom: Spawning military station after 85 days.
# 34. Big Bazoom: Spawning military station after 85 days.
# 34. : Spawning military station after 85 days.
#
# Name is missing on the last one there, because the event target has
# been reset for some weird reason. They're just not reliable over
# chained days=X events.
#


# Controller events for the military Station Marker operation.

namespace = assMarker

ship_event = {
	id = assMarker.100
	hide_window = yes
	is_triggered_only = yes

	# Jeez has_ambient_object_flag can't be used inside any_ambient_object
	# or any_system_ambient_object. What the fuck is that about.

	immediate = {
		# ZZZ Remember this event might trigger after we've aborted operation,
		# ZZZ been destroyed, or any other horrible thing has happened. So make
		# ZZZ sure we don't build unless we're still "valid".
		if = {
			limit = {
				exists = fleet
				fleet = { exists = solar_system }
			}
			# Find our station marker using the relation flag.
			ass_relation_get_any = yes

			# Check if we found the relation target
			if = {
				limit = { has_ship_flag = "ass_found_relation_target" }
				remove_ship_flag = "ass_found_relation_target"
				# Yes, we did, it's set in event_target:ass_target now.
				# And it's a fleet, because ships dont support variables.
				log = "[this.GetName]: Spawning military station at marker [ass_target.GetName] after 85 days."

				# XXX we should check that the relation target is still in the
				# XXX same solar system and such as we are, I guess.
				solar_system = {
					random_system_ambient_object = {
						limit = { has_ambient_object_flag = "ass_spawn_here" }
						ROOT = { set_ship_flag = "ass_spawned_marker_station" }
						create_fleet = {
							effect = {
								set_owner = ROOT.owner
								set_location = PREV
								set_fleet_flag = "ass_spawned_from_marker"
							}
						}
						destroy_ambient_object = THIS
					}
				}

				# We need this ship flag because the any_*ambient_object triggers dont work,
				# and I want to support any random number of ass_spawn_here objects.
				if = {
					limit = { has_ship_flag = "ass_spawned_marker_station" }
					remove_ship_flag = "ass_spawned_marker_station"

					event_target:ass_target = {
						random_owned_ship = {
							switch = {
								trigger = has_component
								ASS_TYPE_XLARGE = { last_created_fleet = { nsc_create_battle_fortress = yes } }
								ASS_TYPE_LARGE  = { last_created_fleet = { create_ship = { name = random random_existing_design = military_station_large } } }
								ASS_TYPE_MEDIUM = { last_created_fleet = { create_ship = { name = random random_existing_design = military_station_medium } } }
								ASS_TYPE_SMALL  = { last_created_fleet = { create_ship = { name = random random_existing_design = military_station_small } } }
							}
						}
					}

					# Yes, we chain it even if there are none left to build.
					# That's why it's 85 days and not 100.
					# XXX We should really stop using these days=X events, because if the ship
					# XXX is killed, it will error on the next hit, even if for example we set
					# XXX trigger = { is_scope_valid = yes }.
					ship_event = { id = assMarker.100 days = 85 }

					else = {
						# We are done.
						ass_stage4_complete_marker = yes
					}
				}

				else = {
					# Relation target NOT found, so abort mission
					log = "[this.GetName]: ERROR: Could not any Station Marker with the same UUID as us, aborting mission."
					ass_stage4_abort_operation = yes
				}
			}
			else = {
				# Relation target NOT found, so abort mission
				log = "[this.GetName]: ERROR: Suddenly without a solar system."
				ass_stage4_abort_operation = yes
			}
		}
	}
}

# on_built_station_marker
# Wait one day, then check the system if there is more than one.
# If there is, refund the player roughly what one of them costs,
# based on has_component.
# This = construction ship
ship_event = {
	id = assMarker.200
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		fleet = { fleet_event = { id = assMarker.201 days = 2 } }
	}
}

fleet_event = {
	id = assMarker.201
	title = "assmarker_morethanone.title"
	desc = "assmarker_morethanone.desc"
	picture = GFX_evt_autonomous_assembler
	is_triggered_only = yes

	trigger = {
		owner = {
			count_owned_ships = {
				count > 1
				limit = {
					is_ship_size = ass_military_complex
					exists = solar_system
					solar_system = { is_same_value = ROOT.solar_system }
				}
			}
		}
	}

	immediate = {
		owner = {
			random_owned_ship = {
				limit = {
					is_ship_size = ass_military_complex
					fleet = {
						exists = solar_system
						solar_system = { is_same_value = ROOT.solar_system }
					}
				}
				save_event_target_as = ass_delete
			}
		}
	}

	# Remember the values here should be same as in
	# common/component_templates/ass_military_station_types.txt
	option = {
		name = UNFORTUNATE
		trigger = { event_target:ass_delete = { has_component = ASS_TYPE_SMALL } }
		owner = { add_minerals = 1500 }
		event_target:ass_delete = { fleet = { destroy_fleet = THIS } }
	}
	option = {
		name = UNFORTUNATE
		trigger = { event_target:ass_delete = { has_component = ASS_TYPE_MEDIUM } }
		owner = { add_minerals = 5000 }
		event_target:ass_delete = { fleet = { destroy_fleet = THIS } }
	}
	option = {
		name = UNFORTUNATE
		trigger = { event_target:ass_delete = { has_component = ASS_TYPE_LARGE } }
		owner = { add_minerals = 9000 }
		event_target:ass_delete = { fleet = { destroy_fleet = THIS } }
	}
	option = {
		name = UNFORTUNATE
		trigger = { event_target:ass_delete = { has_component = ASS_TYPE_XLARGE } }
		owner = { add_minerals = 15000 }
		event_target:ass_delete = { fleet = { destroy_fleet = THIS } }
	}
}


# on yearly pulse
# find any ass_marker_used that are missing their stations
# with no ass_target mark and replace missing stations
# I'm not sure I can do this in a way that keeps the hexagon formation.
# According to trigger_docs, distance does not support ambient objects.
# Of course, the trigger_docs have been wrong many times before.
# I just don't want to check.
