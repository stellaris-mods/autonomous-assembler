###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###


# Controller events for the military Station Marker operation.

namespace = assMarker

# on_building_ass_military_complex
# Wait one day, then check the system if there is more than one.
# If there is, refund the player roughly what one of them costs,
# based on has_component.
# This = construction ship
ship_event = {
	id = assMarker.200
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		owner = {
			count_owned_ships = {
				count = 1
				limit = {
					is_ship_size = ass_military_complex
					exists = solar_system
					solar_system = { is_same_value = ROOT.solar_system }
				}
			}
		}
	}
	immediate = {
		owner = {
			random_owned_ship = {
				limit = {
					is_ship_size = ass_military_complex
					exists = solar_system
					solar_system = { is_same_value = ROOT.solar_system }
				}
				# Make sure we dont delete the existing one.
				set_ship_flag = "ass_keep"
			}
		}
		fleet = { fleet_event = { id = assMarker.201 days = 2 } }
	}
}

fleet_event = {
	id = assMarker.201
	title = "assmarker_morethanone.title"
	desc = "assmarker_morethanone.desc"
	picture = GFX_evt_autonomous_assembler
	is_triggered_only = yes

	immediate = {
		owner = {
			random_owned_ship = {
				limit = {
					is_ship_size = ass_military_complex
					NOT = { has_ship_flag = "ass_keep" }
					fleet = {
						exists = solar_system
						solar_system = { is_same_value = ROOT.solar_system }
					}
				}
				save_event_target_as = ass_delete
			}
		}
		event_target:ass_delete = {
			if = {
				limit = {
					OR = {
						has_component = ASS_TYPE_SMALL
						has_component = ASS_TYPE_MEDIUM
						has_component = ASS_TYPE_LARGE
						has_component = ASS_TYPE_XLARGE
					}
				}
				# Remember the values here should be same as in
				# common/component_templates/ass_military_station_types.txt
				switch = {
					trigger = has_component
					ASS_TYPE_SMALL  = { fleet = { set_variable = { which = "AssRefund" value = 1500 } } }
					ASS_TYPE_MEDIUM = { fleet = { set_variable = { which = "AssRefund" value = 5000 } } }
					ASS_TYPE_LARGE  = { fleet = { set_variable = { which = "AssRefund" value = 9000 } } }
					ASS_TYPE_XLARGE = { fleet = { set_variable = { which = "AssRefund" value = 15000 } } }
				}
			}
			fleet = {
				if = { limit = { check_variable = { which = "AssRefund" value > 0 } }
					if = { # -20%
						limit = { owner = { ruler = { has_trait = trait_ruler_fortifier } } }
						multiply_variable = { which = "AssRefund" value = 0.8 }
					}
					if = { # -15%
						limit = { owner = { has_technology = "tech_space_defense_station_improvement" } }
						multiply_variable = { which = "AssRefund" value = 0.85 }
					}
					# And another -15% for good measure
					multiply_variable = { which = "AssRefund" value = 0.85 }
				}
			}
		}
	}

	after = {
		hidden_effect = {
			event_target:ass_delete = {
				fleet = {
					if = { limit = { check_variable = { which = "AssRefund" value > 0 } }
						while = { # While loops only loop 100 times, so the max refund is 100*100
							limit = { check_variable = { which = "AssRefund" value > 100 } }
							owner = { add_minerals = 100 }
							subtract_variable = { which = "AssRefund" value = 100 }
						}
					}
					destroy_fleet = THIS
				}
			}
			owner = {
				random_owned_ship = {
					limit = { has_ship_flag = "ass_keep" }
					remove_ship_flag = "ass_keep"
				}
			}
		}
	}

	option = {
		name = UNFORTUNATE
		custom_tooltip = "ass_station_marker_standard_refund"
		trigger = {
			event_target:ass_delete = {
				OR = {
					has_component = ASS_TYPE_SMALL
					has_component = ASS_TYPE_MEDIUM
					has_component = ASS_TYPE_LARGE
					has_component = ASS_TYPE_XLARGE
				}
			}
		}
	}
	# This option only shows if the marker has none of the "standard" types,
	# AND there is no custom refund variable set.
	# To support this properly, you will need to register for the on_action
	# on_building_ass_military_complex and immediately set your custom
	# AssRefund value on the fleet.
	# This event is delayed by 2 days, so it will be set before this.
	option = {
		name = UNFORTUNATE
		custom_tooltip = "ass_station_marker_custom_refund_fail"
		trigger = {
			event_target:ass_delete = {
				NOT = {
					has_component = ASS_TYPE_SMALL
					has_component = ASS_TYPE_MEDIUM
					has_component = ASS_TYPE_LARGE
					has_component = ASS_TYPE_XLARGE
				}
				fleet = { check_variable = { which = "AssRefund" value = 0 } }
			}
		}
	}
	# This option only shows if the marker has none of the "standard" types,
	# and there IS a custom refund variable set.
	option = {
		name = UNFORTUNATE
		custom_tooltip = "ass_station_marker_custom_refund_success"
		trigger = {
			event_target:ass_delete = {
				NOT = {
					has_component = ASS_TYPE_SMALL
					has_component = ASS_TYPE_MEDIUM
					has_component = ASS_TYPE_LARGE
					has_component = ASS_TYPE_XLARGE
				}
				fleet = { check_variable = { which = "AssRefund" value > 0 } }
			}
		}
	}
}


# TODO: on yearly pulse: find any ass_marker_used that are missing stations
# with no ass_target mark and replace missing stations
# I'm not sure I can do this in a way that keeps the hexagon formation.
# According to trigger_docs, distance does not support ambient objects.
# Of course, the trigger_docs have been wrong many times before.
# I just don't want to check.
