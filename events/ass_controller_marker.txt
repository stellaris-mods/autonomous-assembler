###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###


# Controller events for the military Station Marker operation.

namespace = assMarker

# on_built_station_marker
# Wait one day, then check the system if there is more than one.
# If there is, refund the player roughly what one of them costs,
# based on has_component.
# This = construction ship
ship_event = {
	id = assMarker.200
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		fleet = { fleet_event = { id = assMarker.201 days = 2 } }
	}
}

fleet_event = {
	id = assMarker.201
	title = "assmarker_morethanone.title"
	desc = "assmarker_morethanone.desc"
	picture = GFX_evt_autonomous_assembler
	is_triggered_only = yes

	trigger = {
		owner = {
			count_owned_ships = {
				count > 1
				limit = {
					is_ship_size = ass_military_complex
					exists = solar_system
					solar_system = { is_same_value = ROOT.solar_system }
				}
			}
		}
	}

	immediate = {
		owner = {
			random_owned_ship = {
				limit = {
					is_ship_size = ass_military_complex
					fleet = {
						exists = solar_system
						solar_system = { is_same_value = ROOT.solar_system }
					}
				}
				save_event_target_as = ass_delete
			}
		}
	}

	# Remember the values here should be same as in
	# common/component_templates/ass_military_station_types.txt
	option = {
		name = UNFORTUNATE
		trigger = { event_target:ass_delete = { has_component = ASS_TYPE_SMALL } }
		owner = { add_minerals = 1500 }
		event_target:ass_delete = { fleet = { destroy_fleet = THIS } }
	}
	option = {
		name = UNFORTUNATE
		trigger = { event_target:ass_delete = { has_component = ASS_TYPE_MEDIUM } }
		owner = { add_minerals = 5000 }
		event_target:ass_delete = { fleet = { destroy_fleet = THIS } }
	}
	option = {
		name = UNFORTUNATE
		trigger = { event_target:ass_delete = { has_component = ASS_TYPE_LARGE } }
		owner = { add_minerals = 9000 }
		event_target:ass_delete = { fleet = { destroy_fleet = THIS } }
	}
	option = {
		name = UNFORTUNATE
		trigger = { event_target:ass_delete = { has_component = ASS_TYPE_XLARGE } }
		owner = { add_minerals = 15000 }
		event_target:ass_delete = { fleet = { destroy_fleet = THIS } }
	}
	# This option only shows if the marker has none of the "standard" types, to
	# hopefully make it easier for 3rd party station types to plug in.
	option = {
		name = UNFORTUNATE
		trigger = {
			event_target:ass_delete = {
				NOT = {
					has_component = ASS_TYPE_SMALL
					has_component = ASS_TYPE_MEDIUM
					has_component = ASS_TYPE_LARGE
					has_component = ASS_TYPE_XLARGE
				}
			}
		}
		owner = { add_minerals = 10000 } # TODO Allow 3rd party to set variable
		event_target:ass_delete = { fleet = { destroy_fleet = THIS } }
	}
}


# TODO: on yearly pulse: find any ass_marker_used that are missing stations
# with no ass_target mark and replace missing stations
# I'm not sure I can do this in a way that keeps the hexagon formation.
# According to trigger_docs, distance does not support ambient objects.
# Of course, the trigger_docs have been wrong many times before.
# I just don't want to check.
