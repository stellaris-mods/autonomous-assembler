###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###


namespace = assCountry

# on_tech_increased
country_event = {
	id = assCountry.100
	title = "ass_wormhole_warn.title"
	desc = "ass_wormhole_warn.desc"
	picture = GFX_evt_autonomous_assembler
	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = "ass_wormhole_warned" }
		OR = {
			last_increased_tech = tech_jump_drive_1
			last_increased_tech = tech_psi_jump_drive_1
		}
		any_owned_ship = {
			is_ship_size = autonomous_assembler
			OR = {
				has_component = ASS_EXPANSION_WORMHOLE_1
				has_component = ASS_EXPANSION_WORMHOLE_2
			}
		}
	}
	option = { name = OK }
	immediate = {
		set_country_flag = "ass_wormhole_warned"
	}
}
# on_tech_increased
country_event = {
	id = assCountry.101
	hide_window = yes
	is_triggered_only = yes

	trigger = { last_increased_tech = tech_autonomous_assembler }

	immediate = {
		if = { limit = { is_ai = yes }
			set_variable = { which = "AssReserve" value = 600 }
		else = {
			set_variable = { which = "AssReserve" value = 100 }
		} }
		country_event = { id = assCountry.500 }
	}
}

# on_fleet_disbanded
# ZZZ on_ship_destroyed_victim does not trigger when a player does this.
# This = owner of fleet
# From = disbanded fleet
country_event = {
	id = assCountry.200
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = FROM
		FROM = { is_ship_size = autonomous_assembler }
	}
	immediate = {
		log = "[root.GetName]: on_fleet_disbanded on assembler."
		FROM = {
			if = { limit = { has_fleet_flag = "autonomous_operation" }
				random_owned_ship = { # Fleet ships
					ass_stage4_abort_operation = yes
				}
			}
		}
	}
}

# on_fleet_destroyed_maintenance
# ZZZ I have never seen this even trigger, and I don't know what causes it.
# If anything does.
# This = owner of fleet
# From = destroyed fleet
country_event = {
	id = assCountry.300
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = FROM
		FROM = { is_ship_size = autonomous_assembler }
	}
	immediate = {
		log = "[root.GetName]: INVESTIGATE: on_fleet_destroyed_maintenance on assembler."
		FROM = {
			if = { limit = { has_fleet_flag = "autonomous_operation" }
				random_owned_ship = { # Fleet ships
					ass_stage4_abort_operation = yes
				}
			}
		}
	}
}

# Resets the event chain and all projects.
# The reason we use an event and not simply an effect that we trigger
# from the projects/etc is so that ROOT is a known scope in the
# localisation strings for the projects.
country_event = {
	id = assCountry.500
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = { limit = { has_event_chain = autonomous_assembler_setup }
			end_event_chain = autonomous_assembler_setup
		}
		if = {
			limit = {
				count_owned_ships = {
					limit = { is_ship_size = autonomous_assembler }
					count > 0
				}
			}
			# Set the AssReserve variable on all fleets
			ass_account_update_reserve = yes

			# The AI simply researches all projects all the time,
			# so lets not create them for the AI.
			if = {
				limit = { is_ai = no }
				begin_event_chain = {
					event_chain = autonomous_assembler_setup
					target = ROOT
				}
				if = { limit = { has_country_flag = "ass_halt_operations" }
					enable_special_project = {
						name = ass_continue_operations
						location = capital_scope
						owner = THIS
					}
				}
				if = { limit = { NOT = { has_country_flag = "ass_halt_operations" } }
					enable_special_project = {
						name = ass_halt_operations
						location = capital_scope
						owner = THIS
					}
				}
				enable_special_project = {
					name = ass_go_home
					location = capital_scope
					owner = THIS
				}
				enable_special_project = {
					name = ass_increase_reserve
					location = capital_scope
					owner = THIS
				}
				if = {
					limit = { check_variable = { which = "AssReserve" value > 599 } }
					enable_special_project = {
						name = ass_decrease_reserve
						location = capital_scope
						owner = THIS
					}
				}
			}
		}
	}
}
