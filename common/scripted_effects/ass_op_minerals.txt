###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###


ass_stage1_set_minerals = {
	set_timed_planet_flag = { flag = "autobuild_planet_block" days = 100 }
	ROOT = {
		set_ship_flag = "ass_op_minerals"
		ass_accounting_set_mining_station_cost = yes
	}
}

ass_stage1_minerals_p1 = {
	# Find any shipclass_mining_station deposits in colonized systems, or
	# deposits that are bigger than 2, or is strategic
	closest_system = {
		limit = {
			ass_system_valid = yes
			is_inside_border = ROOT.owner
			ass_is_friendly_system = yes
			ass_check_minerals_priority_1 = yes
		}
		random_system_planet = {
			limit = {
				ass_valid_mining_planet = yes
				OR = {
					ass_has_valuable_minerals = yes
					ass_has_any_minerals = yes
				}
			}
			ass_stage1_set_minerals = yes
			log = "[Root.GetName]: Moving to orbit [this.GetName] (Minerals P1)"
			ass_relation_flag_planet = yes
			ass_stage2_planet_move = yes
		}
	}
}

ass_stage1_minerals_p2 = {
	# Find any mining deposit
	closest_system = {
		limit = {
			ass_system_valid = yes
			is_inside_border = ROOT.owner
			ass_is_friendly_system = yes
			any_planet = {
				ass_valid_mining_planet = yes
				ass_has_any_minerals = yes
			}
		}
		random_system_planet = {
			limit = {
				ass_valid_mining_planet = yes
				ass_has_any_minerals = yes
			}
			ass_stage1_set_minerals = yes
			log = "[Root.GetName]: Moving to orbit [this.GetName] (Minerals P2)"
			ass_relation_flag_planet = yes
			ass_stage2_planet_move = yes
		}
	}
}

# Root and this = ship
# And we are in orbit, or the mission failed.
ass_stage4_complete_minerals = {
	# assShip.1000 checks for fleet and solar_system, but not orbit.
	if = {
		limit = { fleet = { exists = orbit } }
		# Reset relation_flag
		fleet = {
			orbit = {
				assdbg_relation_removed = yes
				set_variable = { which = "AssUUID" value = 0 }
				remove_planet_flag = "ass_target"
			}
		}
		remove_ship_flag = "ass_relation_planet"

		fleet = { orbit = { create_mining_station = { owner = ROOT.owner } } }
		owner = { ass_update_miner_mandate = yes }

		# Ready for new adventures!
		ass_stage4_operation_complete = yes
		else = {
			log = "[this.GetName]: Wanted to spawn mining station, but we are not in orbit of anything."
			ass_stage4_abort_operation = yes
		}
	}
}
