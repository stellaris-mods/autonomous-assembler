###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###




ass_stage2_military_move = {
	ROOT = {
		set_ship_flag = "ass_op_military"
	}
	PREV = { ass_relation_flag_system = yes }
	ass_stage2_planet_move = yes
}

ass_stage1_set_military_xl = {
	ROOT = {
		ass_discounts_set_military_xlarge_cost = yes
		set_ship_flag = "ass_station_xlarge"
		remove_ship_flag = "ass_station_large"
		remove_ship_flag = "ass_station_medium"
		remove_ship_flag = "ass_station_small"
	}
}
ass_stage1_set_military_l = {
	ROOT = {
		ass_discounts_set_military_large_cost = yes
		remove_ship_flag = "ass_station_xlarge"
		set_ship_flag = "ass_station_large"
		remove_ship_flag = "ass_station_medium"
		remove_ship_flag = "ass_station_small"
	}
}
ass_stage1_set_military_m = {
	ROOT = {
		ass_discounts_set_military_medium_cost = yes
		remove_ship_flag = "ass_station_xlarge"
		remove_ship_flag = "ass_station_large"
		set_ship_flag = "ass_station_medium"
		remove_ship_flag = "ass_station_small"
	}
}
ass_stage1_set_military_s = {
	ROOT = {
		ass_discounts_set_military_small_cost = yes
		remove_ship_flag = "ass_station_xlarge"
		remove_ship_flag = "ass_station_large"
		remove_ship_flag = "ass_station_medium"
		set_ship_flag = "ass_station_small"
	}
}

# ZZZ Note that we check has_orbital_station = no for most of these.
# ZZZ We don't actually need to care about that, but the effect we chain
# ZZZ to later, errors if there is anything in orbit of the target planet
# ZZZ already. Which is something I'll fix eventually.

ass_stage1_military_p1 = {
	# Priority 1 is:
	#  1.1: Find any station markers with tech_ass_hexagon
	#  1.2: Find any colonized system without a station
	ass_stage1_marker_p1 = yes

	if = {
		limit = { ass_has_operation = no }
		# We did not find any markers, so locate a system without a station
		# depending on our tech level.

		# ZZZ Hopefully
		# Requires much less processing to have an if-elseif statement here
		# than to do and OR/AND/OR thing in the closest_system limiter.
		if = {
			limit = {
				has_global_flag = "has_nsc_active"
				owner = { has_technology = "tech_space_defense_station_3" }
			}
			closest_system = {
				limit = {
					NOT = { has_star_flag = "ass_target" }
					ass_system_valid = yes
					is_inside_border = ROOT.owner
					ass_is_friendly_system = yes
					any_planet = { has_orbital_station = no }
					any_planet = { ass_is_owners_planet = yes }
					ass_exists_military_xlarge = no
				}
				random_system_planet = {
					limit = { has_orbital_station = no }
					ass_stage1_set_military_xl = yes
					log = "[Root.GetName]: Moving to [this.GetName] (Military XL)"
					ass_stage2_military_move = yes
				}
			}
		else = { if = { limit = { owner = { has_technology = "tech_space_defense_station_3" } }
			closest_system = {
				limit = {
					NOT = { has_star_flag = "ass_target" }
					ass_system_valid = yes
					is_inside_border = ROOT.owner
					ass_is_friendly_system = yes
					any_planet = { has_orbital_station = no }
					any_planet = { ass_is_owners_planet = yes }
					ass_exists_military_large = no
				}
				random_system_planet = {
					limit = { has_orbital_station = no }
					ass_stage1_set_military_l = yes
					log = "[Root.GetName]: Moving to [this.GetName] (Military L)"
					ass_stage2_military_move = yes
				}
			}
		else = { if = { limit = { owner = { has_technology = "tech_space_defense_station_2" } }
			closest_system = {
				limit = {
					NOT = { has_star_flag = "ass_target" }
					ass_system_valid = yes
					is_inside_border = ROOT.owner
					ass_is_friendly_system = yes
					any_planet = { has_orbital_station = no }
					any_planet = { ass_is_owners_planet = yes }
					ass_exists_military_medium = no
				}
				random_system_planet = {
					limit = { has_orbital_station = no }
					ass_stage1_set_military_m = yes
					log = "[Root.GetName]: Moving to [this.GetName] (Military M)"
					ass_stage2_military_move = yes
				}
			}
		else = { if = { limit = { owner = { has_technology = "tech_space_defense_station_1" } }
			closest_system = {
				limit = {
					NOT = { has_star_flag = "ass_target" }
					ass_system_valid = yes
					is_inside_border = ROOT.owner
					ass_is_friendly_system = yes
					any_planet = { has_orbital_station = no }
					any_planet = { ass_is_owners_planet = yes }
					ass_exists_military_small = no
				}
				random_system_planet = {
					limit = { has_orbital_station = no }
					ass_stage1_set_military_s = yes
					log = "[Root.GetName]: Moving to [this.GetName] (Military S)"
					ass_stage2_military_move = yes
				}
			}
		} } } } } } }
	}
}

ass_stage1_military_p2 = {
	# Find any owned system without a military station

	# ZZZ Hopefully
	# Requires much less processing to have an if-elseif statement here
	# than to do and OR/AND/OR thing in the closest_system limiter.
	if = {
		limit = {
			has_global_flag = "has_nsc_active"
			owner = { has_technology = "tech_space_defense_station_3" }
		}
		closest_system = {
			limit = {
				NOT = { has_star_flag = "ass_target" }
				ass_system_valid = yes
				is_inside_border = ROOT.owner
				ass_is_friendly_system = yes
				any_planet = { has_orbital_station = no }
				ass_exists_military_xlarge = no
			}
			random_system_planet = {
				limit = { has_orbital_station = no }
				ass_stage1_set_military_xl = yes
				log = "[Root.GetName]: Moving to [this.GetName] (Military P2 XL)"
				ass_stage2_military_move = yes
			}
		}
	else = { if = { limit = { owner = { has_technology = "tech_space_defense_station_3" } }
		closest_system = {
			limit = {
				NOT = { has_star_flag = "ass_target" }
				ass_system_valid = yes
				is_inside_border = ROOT.owner
				ass_is_friendly_system = yes
				any_planet = { has_orbital_station = no }
				ass_exists_military_large = no
			}
			random_system_planet = {
				limit = { has_orbital_station = no }
				ass_stage1_set_military_l = yes
				log = "[Root.GetName]: Moving to [this.GetName] (Military P2 L)"
				ass_stage2_military_move = yes
			}
		}
	else = { if = { limit = { owner = { has_technology = "tech_space_defense_station_2" } }
		closest_system = {
			limit = {
				NOT = { has_star_flag = "ass_target" }
				ass_system_valid = yes
				is_inside_border = ROOT.owner
				ass_is_friendly_system = yes
				any_planet = { has_orbital_station = no }
				ass_exists_military_medium = no
			}
			random_system_planet = {
				limit = { has_orbital_station = no }
				ass_stage1_set_military_m = yes
				log = "[Root.GetName]: Moving to [this.GetName] (Military P2 M)"
				ass_stage2_military_move = yes
			}
		}
	else = { if = { limit = { owner = { has_technology = "tech_space_defense_station_1" } }
		closest_system = {
			limit = {
				NOT = { has_star_flag = "ass_target" }
				ass_system_valid = yes
				is_inside_border = ROOT.owner
				ass_is_friendly_system = yes
				any_planet = { has_orbital_station = no }
				ass_exists_military_small = no
			}
			random_system_planet = {
				limit = { has_orbital_station = no }
				ass_stage1_set_military_s = yes
				log = "[Root.GetName]: Moving to [this.GetName] (Military P2 S)"
				ass_stage2_military_move = yes
			}
		}
	} } } } } } }
}

# Root and this = ship
# And we are in orbit, or the mission failed.
ass_stage4_complete_military = {
	# assShip.1000 checks both fleet and solar system
	# XXX but it does not verify that we are still in the same system

	# Reset relation_flag
	fleet = {
		solar_system = {
			assdbg_relation_removed = yes
			set_variable = { which = "AssUUID" value = 0 }
			remove_star_flag = "ass_target"
		}
	}
	remove_ship_flag = "ass_relation_system"

	fleet = {
		orbit = {
			create_fleet = {
				effect = {
					set_owner = ROOT.owner
					set_location = PREV
				}
			}
		}
	}
	switch = {
		trigger = has_ship_flag
		ass_station_xlarge = { last_created_fleet = { nsc_create_battle_fortress = yes } }
		ass_station_large  = { last_created_fleet = { create_ship = { name = random random_existing_design = military_station_large } } }
		ass_station_medium = { last_created_fleet = { create_ship = { name = random random_existing_design = military_station_medium } } }
		ass_station_small  = { last_created_fleet = { create_ship = { name = random random_existing_design = military_station_small } } }
	}

	# Ready for new adventures!
	ass_stage4_operation_complete = yes
}

