
# ass_accounting_update_fleet = yes
#
# Copies AssMinerals from country to fleet.
#
# The main reason we have ass_accounting_update_fleet and
# ass_accounting_count_minerals split is because in the monthly pulse
# event that checks for cash for waiting ships, we only really need
# to do ass_accounting_count_minerals once, and then
# ass_accounting_update_fleet once per fleet.
#
# When a ship arrives at a target, we do ass_accounting_count_minerals
# first, and then ass_accounting_update_fleet immediately.
#
# THIS = ship
# owner.AssMinerals must be set and updated
ass_accounting_update_fleet = {
	fleet = {
		set_variable = { which = "AssMinerals" value = 0 }
		owner = {
			# Make a copy we can mangle
			set_variable = { which = "AssTmp" value = "AssMinerals" }
			# Copy to fleet
			while = {
				limit = { check_variable = { which = "AssTmp" value > 1000 } }
				PREV = { change_variable = { which = "AssMinerals" value = 1000 } }
				subtract_variable = { which = "AssTmp" value = 1000 }
			}
			while = {
				limit = { check_variable = { which = "AssTmp" value > 100 } }
				PREV = { change_variable = { which = "AssMinerals" value = 100 } }
				subtract_variable = { which = "AssTmp" value = 100 }
			}
			while = {
				limit = { check_variable = { which = "AssTmp" value > 10 } }
				PREV = { change_variable = { which = "AssMinerals" value = 10 } }
				subtract_variable = { which = "AssTmp" value = 10 }
			}
			while = {
				limit = { check_variable = { which = "AssTmp" value > 0 } }
				PREV = { change_variable = { which = "AssMinerals" value = 1 } }
				subtract_variable = { which = "AssTmp" value = 1 }
			}
		}
		# AssMinerals in the fleet scope is updated
	}
}

# This copies AssReserve from country to all assembler fleets
# Automatically invoked every time we update reserves from a special
# project, or we create a new assembler.
# THIS = country
ass_accounting_update_reserves = {
	every_owned_fleet = {
		limit = { is_ship_size = autonomous_assembler }
		set_variable = { which = "AssReserve" value = 0 }
		owner = {
			# Make a copy we can mangle
			set_variable = { which = "AssTmp" value = "AssReserve" }
			# Copy to ship
			while = {
				limit = { check_variable = { which = "AssTmp" value > 1000 } }
				PREV = { change_variable = { which = "AssReserve" value = 1000 } }
				subtract_variable = { which = "AssTmp" value = 1000 }
			}
			while = {
				limit = { check_variable = { which = "AssTmp" value > 100 } }
				PREV = { change_variable = { which = "AssReserve" value = 100 } }
				subtract_variable = { which = "AssTmp" value = 100 }
			}
			while = {
				limit = { check_variable = { which = "AssTmp" value > 10 } }
				PREV = { change_variable = { which = "AssReserve" value = 10 } }
				subtract_variable = { which = "AssTmp" value = 10 }
			}
			while = {
				limit = { check_variable = { which = "AssTmp" value > 0 } }
				PREV = { change_variable = { which = "AssReserve" value = 1 } }
				subtract_variable = { which = "AssTmp" value = 1 }
			}
		}
		log = "[this.GetName]: Updated AssReserve to [this.AssReserve]."
	}
}

# Counts the available minerals
# THIS = country
ass_accounting_count_minerals = {
	# Hard Reset
	set_variable = { which = "AssMinerals" value = 0 }
	# First, set AssMinerals2 to as many minerals as the country has
	while = {
		limit = { minerals > 10000 }
		add_minerals = -10000
		change_variable = { which = "AssMinerals" value = 10000 }
	}
	while = {
		limit = { minerals > 1000 }
		add_minerals = -1000
		change_variable = { which = "AssMinerals" value = 1000 }
	}
	while = {
		limit = { minerals > 100 }
		add_minerals = -100
		change_variable = { which = "AssMinerals" value = 100 }
	}
	while = {
		limit = { minerals > 10 }
		add_minerals = -10
		change_variable = { which = "AssMinerals" value = 10 }
	}
	while = {
		limit = { minerals > 0 }
		add_minerals = -1
		change_variable = { which = "AssMinerals" value = 1 }
	}
	# Make a copy we can mangle
	set_variable = { which = "AssTmp" value = "AssMinerals" }
	# And give the country its minerals back
	while = {
		limit = { check_variable = { which = "AssTmp" value > 1000 } }
		add_minerals = 1000
		subtract_variable = { which = "AssTmp" value = 1000 }
	}
	while = {
		limit = { check_variable = { which = "AssTmp" value > 100 } }
		add_minerals = 100
		subtract_variable = { which = "AssTmp" value = 100 }
	}
	while = {
		limit = { check_variable = { which = "AssTmp" value > 10 } }
		add_minerals = 10
		subtract_variable = { which = "AssTmp" value = 10 }
	}
	while = {
		limit = { check_variable = { which = "AssTmp" value > 0 } }
		add_minerals = 1
		subtract_variable = { which = "AssTmp" value = 1 }
	}
}

# THIS = ship
ass_accounting_grabdatcash = {
	# Makes sure we refund the country AssMissionCost if we abort.
	set_ship_flag = "ass_refund_if_aborted"
	fleet = {
		log = "[Prev.GetName]: Grabbing mission cost [this.AssMissionCost]."
		# Make a copy we can mangle
		set_variable = { which = "AssTmp" value = "AssMissionCost" }
		while = {
			limit = {
				check_variable = { which = "AssTmp" value > 1000 }
				owner = { minerals > 1000 }
			}
			owner = { add_minerals = -1000 }
			change_variable = { which = "AssTmp" value = -1000 }
		}
		while = {
			limit = {
				check_variable = { which = "AssTmp" value > 100 }
				owner = { minerals > 100 }
			}
			owner = { add_minerals = -100 }
			change_variable = { which = "AssTmp" value = -100 }
		}
		while = {
			limit = {
				check_variable = { which = "AssTmp" value > 10 }
				owner = { minerals > 10 }
			}
			owner = { add_minerals = -10 }
			change_variable = { which = "AssTmp" value = -10 }
		}
		while = {
			limit = {
				check_variable = { which = "AssTmp" value > 0 }
				owner = { minerals > 0 }
			}
			owner = { add_minerals = -1 }
			change_variable = { which = "AssTmp" value = -1 }
		}
	}
}

# THIS = ship
ass_accounting_refund = {
	fleet = {
		log = "[Prev.GetName]: refunding [this.AssMissionCost]."
		# Make a copy we can mangle. Could "probably" mangle
		# the main variable now, since we're probably aborting mission.
		# No need to take any risks with future behaviors.
		set_variable = { which = "AssTmp" value = "AssMissionCost" }
		while = {
			limit = { check_variable = { which = "AssTmp" value > 1000 } }
			owner = { add_minerals = 1000 }
			change_variable = { which = "AssTmp" value = -1000 }
		}
		while = {
			limit = { check_variable = { which = "AssTmp" value > 100 } }
			owner = { add_minerals = 100 }
			change_variable = { which = "AssTmp" value = -100 }
		}
		while = {
			limit = { check_variable = { which = "AssTmp" value > 10 } }
			owner = { add_minerals = 10 }
			change_variable = { which = "AssTmp" value = -10 }
		}
		while = {
			limit = { check_variable = { which = "AssTmp" value > 0 } }
			owner = { add_minerals = 1 }
			change_variable = { which = "AssTmp" value = -1 }
		}
	}
}

@baseMilitaryXLarge = 2250
@baseMilitaryLarge = 1400
@baseMilitaryMedium = 700
@baseMilitarySmall = 250
@baseMining = 90
@baseResearch = 90
@baseWormhole = 75

# We don't have any operation for making frontier outposts yet.
# trait_ruler_expansionist: shipsize_outpost_station_build_cost_mult -0.15

# I can't immediately see any API to check which agenda is set
# agenda_defensive_focus: shipclass_military_station_build_cost_mult = -0.15
ass_accounting_deduct_military_cost = {
	if = { # -20%
		limit = { owner = { ruler = { has_trait = trait_ruler_fortifier } } }
		fleet = { multiply_variable = { which = "AssMissionCost" value = 0.8 } }
	}
	if = { # -15%
		limit = { owner = { has_technology = "tech_space_defense_station_improvement" } }
		fleet = { multiply_variable = { which = "AssMissionCost" value = 0.85 } }
	}
}

ass_accounting_set_military_xlarge_cost = {
	fleet = { set_variable = { which = "AssMissionCost" value = @baseMilitaryXLarge } }
	ass_accounting_deduct_military_cost = yes
}

ass_accounting_set_military_large_cost = {
	fleet = { set_variable = { which = "AssMissionCost" value = @baseMilitaryLarge } }
	ass_accounting_deduct_military_cost = yes
}

ass_accounting_set_military_medium_cost = {
	fleet = { set_variable = { which = "AssMissionCost" value = @baseMilitaryMedium } }
	ass_accounting_deduct_military_cost = yes
}

ass_accounting_set_military_small_cost = {
	fleet = { set_variable = { which = "AssMissionCost" value = @baseMilitarySmall } }
	ass_accounting_deduct_military_cost = yes
}

ass_accounting_set_mining_station_cost = {
	fleet = { set_variable = { which = "AssMissionCost" value = @baseMining } }
	if = { # trait_ruler_space_miner: shipsize_mining_station_build_cost_mult -0.25
		limit = { owner = { ruler = { has_trait = trait_ruler_space_miner } } }
		fleet = { multiply_variable = { which = "AssMissionCost" value = 0.75 } }
	}
}

ass_accounting_set_research_station_cost = {
	fleet = { set_variable = { which = "AssMissionCost" value = @baseResearch } }
}

ass_accounting_set_wormhole_station_cost = {
	fleet = { set_variable = { which = "AssMissionCost" value = @baseWormhole } }
}
