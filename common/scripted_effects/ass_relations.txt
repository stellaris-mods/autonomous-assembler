###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###


# The effects in this file are used to map "generic" relation flag
# between a fleet and an arbitrary scope.
#
# We need this because clear_fleet_actions aborts a queue_actions completely
# and instantly, not allowing us to de-mark targets.
# And in on_ship_order, we need to clear_fleet_actions instantly to
# allow the player to order the assemblers at all.
#
# Also we need the ass_target flag at all just so we prevent several
# autonomous assemblers from attempting the same operation at the same time.
# In case that wasn't obvious.
#
# If we simply event locked the assemblers 24/7, or ignored players
# attempts to order them manually, we would not need this system at all.
#
# But I don't think that would feel natural.
#
# And we can't use event targets, because any on_action that we may
# want to "abort" operation on would not be the same event chain as the
# one that started the operation.
#
# Many things in this file break if there are more than 100 total
# galaxy-wide ass_targets of the same scope type.
# I don't think there's much I can do about it except run while loops
# many times in a row. I'll do that if anyone complains.
#

###############################################################################
# API
#
# It's mostly these effects inside the ##### block that you want to invoke
# from the outside. The rest of the file below contains the bloody internals.
#

# ROOT must be the ship
# THIS must be the planet
# Should not be called on anything that is already a relation.
# (you can simply check if they have the ass_target flag)
ass_relation_flag_planet = {
	ass_relation_internal_ensure_uuid = yes
	ass_relation_internal_set_uuid = yes
	set_planet_flag = "ass_target"
	ROOT = { set_ship_flag = "ass_relation_planet" }
}

# ROOT must be the ship
# THIS must be a fleet that ROOT.owner owns
# Can only be used on owned fleets, for now
#.
# Should not be called on anything that is already a relation.
# (you can simply check if they have the ass_target flag)
ass_relation_flag_fleet = {
	ass_relation_internal_ensure_uuid = yes
	ass_relation_internal_set_uuid = yes
	set_fleet_flag = "ass_target"
	ROOT = { set_ship_flag = "ass_relation_fleet" }
}

# ROOT must be the ship
# THIS must be the system
# Should not be called on anything that is already a relation.
# (you can simply check if they have the ass_target flag)
ass_relation_flag_system = {
	ass_relation_internal_ensure_uuid = yes
	ass_relation_internal_set_uuid = yes
	set_star_flag = "ass_target"
	ROOT = { set_ship_flag = "ass_relation_system" }
}

# THIS = assembler ship
# Returns an event_target:ass_target, that is either a system/fleet/planet
# And also sets ship flag "ass_found_relation_target", if found.
ass_relation_get_any = {
	switch = {
		trigger = has_ship_flag
		ass_relation_system = { ass_relation_internal_get_system = yes }
		ass_relation_fleet = { ass_relation_internal_get_fleet = yes }
		ass_relation_planet = { ass_relation_internal_get_planet = yes }
	}
}

# THIS = assembler ship
# Invoke this when you need to remove the ships relation flag.
ass_relation_remove_any = {
	switch = {
		trigger = has_ship_flag
		ass_relation_system = { ass_relation_internal_remove_system = yes }
		ass_relation_fleet = { ass_relation_internal_remove_fleet = yes }
		ass_relation_planet = { ass_relation_internal_remove_planet = yes }
	}
}

# THIS = assembler ship
# event_target:ass_target = target system/planet/fleet
# Marks this assemblers relation as invalid, for all our scripted_triggers
ass_relation_invalidate = {
	if = {
		limit = { exists = event_target:ass_target }
		switch = {
			trigger = has_ship_flag
			ass_relation_system = {
				event_target:ass_target = {
					set_timed_star_flag = {
						flag = "ass_error"
						days = 180
					}
				}
			}
			ass_relation_fleet = {
				event_target:ass_target = {
					set_timed_fleet_flag = {
						flag = "ass_error"
						days = 180
					}
				}
			}
			ass_relation_planet = {
				event_target:ass_target = {
					set_timed_planet_flag = {
						flag = "ass_error"
						days = 180
					}
				}
			}
		}
	}
}

#
# END API
###############################################################################
#
# The rest of the file contains gory implementation details, and you should
# never need to invoke these effects outside of this file.
#

ass_relation_internal_ensure_uuid = {
	ROOT = {
		if = { limit = { NOT = { has_ship_flag = "ass_id" } }
			owner = {
				# The UUID counter is stored in the country scope so that it
				# persists throughout the game (hopefully). It's at least the
				# most persistent object that has a scopable relation to the
				# ship. The only real alternative would be capital_scope.
				#
				# Increment UUID by +1
				change_variable = { which = "AssUUID" value = 1 }
				# Make a copy that we can mangle
				set_variable = { which = "AssTmp" value = "AssUUID" }
				# Copy to fleet
				while = { # ZZZ only loops 100 times, but if you have 100x asses then plz
					limit = { check_variable = { which = "AssTmp" value > 0 } }
					subtract_variable = { which = "AssTmp" value = 1 }
					PREV = {
						fleet = {
							change_variable = {
								which = "AssUUID"
								value = 1
							}
						}
					}
				}
			}
			assdbg_got_uuid = yes
			set_ship_flag = "ass_id"
		}
	}
}

ass_relation_internal_set_uuid = {
	# Reset the targets variable in case it has been targetted before by anything.
	set_variable = { which = "AssUUID" value = 0 }
	ROOT = {
		fleet = {
			# Make a copy of the UUID that we can mangle
			set_variable = { which = "AssTmp" value = "AssUUID" }
			# Copy the UUID to our target
			while = {
				limit = { check_variable = { which = "AssTmp" value > 0 } }
				subtract_variable = { which = "AssTmp" value = 1 }
				# PREV is ship, PREVPREV is the THIS
				# scope in ass_mark_*
				PREVPREV = {
					change_variable = {
						which = "AssUUID"
						value = 1
					}
				}
			}
		}
	}
	assdbg_relation_set = yes
}

ass_relation_internal_remove_system = {
	ass_relation_internal_get_system = yes
	remove_ship_flag = "ass_relation_system"
	if = { limit = { has_ship_flag = "ass_found_relation_target" }
		event_target:ass_target = {
			# We found our target system: reset it!
			set_variable = { which = "AssUUID" value = 0 }
			remove_star_flag = "ass_target"
			assdbg_relation_manual_remove = yes
		}
	}
}

ass_relation_internal_remove_fleet = {
	ass_relation_internal_get_fleet = yes
	remove_ship_flag = "ass_relation_fleet"
	if = { limit = { has_ship_flag = "ass_found_relation_target" }
		event_target:ass_target = {
			# We found our target fleet: reset it!
			set_variable = { which = "AssUUID" value = 0 }
			remove_fleet_flag = "ass_target"
			assdbg_relation_manual_remove = yes
		}
	}
}

ass_relation_internal_remove_planet = {
	ass_relation_internal_get_planet = yes
	remove_ship_flag = "ass_relation_planet"
	if = { limit = { has_ship_flag = "ass_found_relation_target" }
		event_target:ass_target = {
			# We found our target planet: reset it!
			set_variable = { which = "AssUUID" value = 0 }
			remove_fleet_flag = "ass_target"
			assdbg_relation_manual_remove = yes
		}
	}
}

# THIS must be the fleet
# PREV must be the assembler
# PREVPREV must be an ass_target scope (fleet/system/planet)
# Compares AssUUID on THIS and PREVPREV, and sets:
# - ship flag "ass_found_relation_target"
# - event_target:ass_target
# If they match.
ass_relation_internal_compare_uuid = {
	# First, reset the compare variable
	set_variable = { which = "AssCompareUUID" value = 0 }
	# Then, copy the AssUUID from PREVPREV to the ship
	# To do that, we need a copy we can mangle
	PREVPREV = { set_variable = { which = "AssTmp" value = "AssUUID" } }
	while = {
		limit = { PREVPREV = { check_variable = { which = "AssTmp" value > 0 } } }
		PREVPREV = { subtract_variable = { which = "AssTmp" value = 1 } }
		# Increase the compare variable in the ships fleet
		change_variable = { which = "AssCompareUUID" value = 1 }
	}
	if = { # Now, check if they are the same.
		limit = { check_variable = { which = "AssCompareUUID" value = "AssUUID" } }
		# Yes, they are, this is our target.
		set_global_flag = "ass_break"
		PREV = { set_ship_flag = "ass_found_relation_target" }
		PREVPREV = { save_event_target_as = ass_target }
		# Reset variable again, so we dont clutter up the debugtooltip
		set_variable = { which = "AssCompareUUID" value = 0 }
	}
}

# THIS must be the ship
ass_relation_internal_get_fleet = {
	remove_ship_flag = "ass_found_relation_target"
	owner = {
		every_owned_fleet = {
			limit = {
				# Hopefully there wont be more than 100 :-P
				has_fleet_flag = "ass_target"
				# Worth noting that we reset AssUUID to 0 when we unmark
				check_variable = { which = "AssUUID" value > 0 }
			}
			set_fleet_flag = "ass_checked"
		}
		remove_global_flag = "ass_break"
		while = {
			limit = {
				NOT = { has_global_flag = "ass_break" }
				any_owned_fleet = {
					has_fleet_flag = "ass_checked"
				}
			}
			random_owned_fleet = {
				limit = { has_fleet_flag = "ass_checked" }
				PREVPREV = { fleet = { ass_relation_internal_compare_uuid = yes } }
			}
		}
		# Clean up
		remove_global_flag = "ass_break"
		while = {
			limit = { any_owned_fleet = { has_fleet_flag = "ass_checked" } }
			random_owned_fleet = {
				limit = { has_fleet_flag = "ass_checked" }
				remove_fleet_flag = "ass_checked"
			}
		}
	}
}

ass_relation_internal_get_system = {
	remove_ship_flag = "ass_found_relation_target"
	remove_global_flag = "ass_break"
	while = {
		limit = {
			NOT = { has_global_flag = "ass_break" }
			any_system = {
				has_star_flag = "ass_target"
				check_variable = { which = "AssUUID" value > 0 }
				NOT = { has_star_flag = "ass_checked" }
			}
		}
		random_system = {
			limit = {
				has_star_flag = "ass_target"
				check_variable = { which = "AssUUID" value > 0 }
				NOT = { has_star_flag = "ass_checked" }
			}
			PREV = { fleet = { ass_relation_internal_compare_uuid = yes } }
		}
	}
	# Clean up
	remove_global_flag = "ass_break"
	while = {
		limit = { any_system = { has_star_flag = "ass_checked" } }
		random_system = {
			limit = { has_star_flag = "ass_checked" }
			remove_star_flag = "ass_checked"
		}
	}
}

# We could check any_planet_within_border but solar systems
# might be removed from our borders while the ship is on operation.
# So we need to check any_system = { any_planet }
ass_relation_internal_get_planet = {
	remove_ship_flag = "ass_found_relation_target"
	remove_global_flag = "ass_break"
	while = {
		limit = {
			NOT = { has_global_flag = "ass_break" }
			any_system = {
				any_planet = {
					has_planet_flag = "ass_target"
					check_variable = { which = "AssUUID" value > 0 }
					NOT = { has_planet_flag = "ass_checked" }
				}
			}
		}
		random_planet = {
			limit = {
				has_planet_flag = "ass_target"
				check_variable = { which = "AssUUID" value > 0 }
				NOT = { has_planet_flag = "ass_checked" }
			}
			PREV = { fleet = { ass_relation_internal_compare_uuid = yes } }
		}
	}
	# Clean up
	remove_global_flag = "ass_break"
	while = {
		limit = { any_system = { any_planet = { has_planet_flag = "ass_checked" } } }
		random_planet = {
			limit = { has_planet_flag = "ass_checked" }
			remove_planet_flag = "ass_checked"
		}
	}
}
