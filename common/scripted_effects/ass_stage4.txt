###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###

ass_stage4_construction_complete = {
	# Get event_target:ass_target
	ass_relation_get_any = yes
	# Check if we should fail for some reason.
	ass_verify_failure_conditions = yes

	switch = {
		trigger = has_ship_flag
		ass_op_spaceport_modules = { ass_stage4_complete_spaceport_module = yes }
		ass_op_minerals = { ass_stage4_complete_minerals = yes }
		ass_op_energy   = { ass_stage4_complete_energy = yes }
		ass_op_research = { ass_stage4_complete_research = yes }
		ass_op_military = { ass_stage4_complete_military = yes }
		ass_op_wormhole = { ass_stage4_complete_wormhole = yes }
		ass_op_marker   = { ass_stage3_marker_build = yes }
	}
	ass_stage4_complete_3rd = yes
}


# Hopefully, keeping AI assemblers locked prevents the AI from
# ordering the ship around. I don't know if it does, but I hope so.
ass_stage4_unlock_ship = {
	if = { limit = { owner = { is_ai = no } }
		fleet = { set_event_locked = no }
	}
}

ass_stage4_operation_complete = {
	log = "[this.GetName]: Operation complete."

	# Reset operation costs
	fleet = {
		set_variable = { which = "AssOperationCost" value = 0 }
		set_variable = { which = "AssOperationCostInfluence" value = 0 }
		set_variable = { which = "AssOperationCostEnergy" value = 0 }
		set_variable = { which = "AssConstructionTime" value = 0 }
	}

	# Operation types
	remove_ship_flag = "ass_op_dock"
	remove_ship_flag = "ass_op_minerals"
	remove_ship_flag = "ass_op_energy"
	remove_ship_flag = "ass_op_research"
	remove_ship_flag = "ass_op_observation"
	remove_ship_flag = "ass_op_military"
	remove_ship_flag = "ass_op_marker"
	remove_ship_flag = "ass_op_wormhole"
	remove_ship_flag = "ass_op_spaceport_modules"

	# Other flags that _require_ removal, and why
	remove_ship_flag = "ass_waiting_for_cash"     # Fleet name
	# Fleet name + in case we were aborted while constructing
	remove_ship_flag = "ass_constructing_station"

	# Other flags we want to remove, simply
	# because we dont want to clutter up the debugtooltip.
	# Dont add any here that _require_ removal.
	remove_ship_flag = "ass_found_relation_target"
	remove_ship_flag = "ass_refund_if_aborted"
	remove_ship_flag = "ass_station_xlarge"
	remove_ship_flag = "ass_station_large"
	remove_ship_flag = "ass_station_medium"
	remove_ship_flag = "ass_station_small"
	fleet = {
		# Remember to never reset AssReserve, it's only updated when needed.
		# These variables are set again for every operation.
		set_variable = { which = "AssMinerals" value = 0 }
		set_variable = { which = "AssMinMinerals" value = 0 }
		set_variable = { which = "AssEnergy" value = 0 }
		set_variable = { which = "AssMinEnergy" value = 0 }
		set_variable = { which = "AssInfluence" value = 0 }
		set_variable = { which = "AssMinInfluence" value = 0 }
	}

	# Mission-specific tooltip de-clutter effects
	ass_stage4_remove_spaceport_module_data = yes

	# Make sure we're not eventlocked
	ass_stage4_unlock_ship = yes

	fleet = {
		remove_fleet_flag = "autonomous_initial_order"
		remove_fleet_flag = "autonomous_operation"
		clear_fleet_actions = THIS
	}

	ass_set_fleet_name = yes
	ass_3rd_op_complete = yes
}

# THIS needs to be the ship
ass_stage4_abort_operation = {
	if = {
		limit = { ass_has_operation = yes }
		log = "[this.GetName]: ERROR: Operation forcefully aborted."
		ass_relation_invalidate = yes

		if = {
			limit = { has_ship_flag = "ass_refund_if_aborted" }
			ass_account_refund = yes
			remove_ship_flag = "ass_refund_if_aborted"
		}

		ass_3rd_op_abort = yes
		ass_relation_remove_any = yes

		# For ass_set_fleet_name.
		set_timed_ship_flag = {
			flag = "ass_aborted"
			days = 5
		}

		# Mission-specific abort effects
		ass_stage4_abort_spaceport_module = yes

		else = {
			# This can happen if there's any reason an assembler would cancel an operation in progress
			# after we've triggered a days=X event. When that event occurs, hopefully we check if all
			# required scopes and such exist, and if not, we invoke ass_stage4_abort_operation again.
			log = "[this.GetName]: Wanted to forcefully abort an operation, but we are not doing anything."
		}
	}

	# Regardless of whether we're on an active operation that needs aborting or
	# not, invoke ass_stage4_operation_complete so that we clean up whatever
	# conditions allowed us to trigger ass_stage4_abort_operation without an
	# active operation. I've never seen this happen, but 3rd party addons might
	# plug into the addon in mysterious ways :-P
	ass_stage4_operation_complete = yes
}
