

# This updates AssMinimum before we use the ass_can_afford trigger.
ass_update_total_cost = {
	fleet = {
		set_variable = { which = "AssMinimum" value = "AssOperationCost" }
		change_variable = { which = "AssMinimum" value = "AssReserve" }
		log = "Country bank: [this.AssMinerals]."
		log = "Country reserve: [this.AssReserve]."
		log = "Operation cost: [this.AssOperationCost]."
		log = "Minimum bank: [this.AssMinimum]."
	}
}

ass_build_station = {
	ass_update_total_cost = yes
	if = {
		limit = { ass_can_afford = yes }
		ass_accounting_grabdatcash = yes

		remove_ship_flag = "ass_waiting_for_cash"
		log = "[this.GetName]: Constructing station..."
		ship_event = { id = assShip.1000 days = 100 }

		else = {
			log = "[this.GetName]: Waiting for resources..."
			set_ship_flag = "ass_waiting_for_cash"
		}
	}
}

# THIS must be the ship
ass_stage2_planet_reached = {
	log = "[this.GetName]: Probably at destination [this.Orbit.GetName]."
	if = {
		limit = { ass_has_operation = yes }

		if = {
			limit = {
				#exists = orbit
				orbit = {
					has_mining_station = no
					has_research_station = no # might not work
					has_spaceport = no
					has_observation_outpost = no # might not work
					has_orbital_station = no
				}
			}
			# ZZZ Now we either wait for cash or build, so lock now.
			fleet = { set_event_locked = yes }

			owner = { ass_accounting_count_minerals = yes }

			ass_accounting_update_fleet = yes
			ass_build_station = yes

			else = {
				log = "[this.GetName]: ERROR: There's already some sort of station in orbit."
				# XXX need to mark this planet so we ignore it at least for a timed_flag
				ass_op_abort = yes
			}
		}

		else = {
			log = "[this.GetName]: ERROR: Reached end of queue_actions without an operation. That's weird."
			# XXX need to mark this planet so we ignore it at least for a timed_flag
			ass_op_abort = yes
		}
	}
}

ass_stage2_planet_move = {
	ass_mark_planet = yes
	PREVPREV = {
		fleet = {
			set_fleet_flag = "autonomous_initial_order" # Removed instantly
			set_fleet_flag = "autonomous_operation"
			queue_actions = {
				orbit_planet = PREVPREV
				repeat = {
					while = {
						id = assResearchMove.1
						NOT = { is_fleet_idle = yes }
					}
					wait = 7
				}
				effect = {
					id = assResearchMove.2
					PREV = { ass_stage2_planet_reached = yes }
				}
			}
		}
	}
}
