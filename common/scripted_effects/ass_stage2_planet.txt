###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###


# THIS must be the ship
ass_stage2_planet_reached = {
	# We dont need the event target, it's just much easier than prevprevprevprevprevprevprevprev
	PREVPREVPREV = { save_event_target_as = ass_target }
	if = {
		limit = { ass_has_operation = yes }
		if = {
			limit = {
				OR = {
					AND = {
						exists = orbit
						orbit = { is_same_value = event_target:ass_target }
					}
					solar_system = {
						is_same_value = event_target:ass_target.solar_system
						event_target:ass_target = {
							distance = {
								source = PREVPREV
								max_distance = 20
							}
						}
					}
				}
			}
			log = "[this.GetName]: In proximity of planet [ass_target.GetName]."
			ass_init_stage3 = yes
			else = {
				log = "[this.GetName]: ERROR: Either we are not in the same system, or not in orbit, or simply too far away from [ass_target.GetName]."
				event_target:ass_target = {
					set_timed_planet_flag = {
						flag = "ass_error"
						days = 180
					}
				}
				ass_op_abort = yes
			}
		}
		else = {
			log = "[this.GetName]: ERROR: Reached end of queue_actions without an operation. That's weird."
			event_target:ass_target = {
				set_timed_planet_flag = {
					flag = "ass_error"
					days = 180
				}
			}
			ass_op_abort = yes
		}
	}
}

# Always invoke from the scope of the planet you want to move to.
ass_stage2_planet_move = {
	PREVPREV = {
		fleet = {
			set_fleet_flag = "autonomous_initial_order" # Removed instantly
			set_fleet_flag = "autonomous_operation"
			queue_actions = {
				orbit_planet = PREVPREV
				repeat = {
					while = {
						id = assPlanetMove.1
						NOT = { is_fleet_idle = yes }
					}
					wait = 7
				}
				effect = {
					id = assPlanetMove.2
					PREV = { ass_stage2_planet_reached = yes }
				}
			}
		}
	}
}
