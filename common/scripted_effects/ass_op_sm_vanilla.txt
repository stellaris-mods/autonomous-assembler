###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###


###############################################################################
# Spaceport Module Effects for vanilla modules
#
# THIS in all ass_stage1_sm_ effects is the blueprint planet
# ROOT is always the assembler
#

ass_stage1_sm_battleship_assembly_yards = {
	if = {
		limit = {
			has_spaceport_module = battleship_assembly_yards
			owner = {
				any_owned_planet = {
					ass_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = battleship_assembly_yards }
					can_build_spaceport_module = battleship_assembly_yards
				}
			}
		}
		owner = {
			random_owned_planet = {
				limit = {
					ass_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = battleship_assembly_yards }
					can_build_spaceport_module = battleship_assembly_yards
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost" value = 500 } }
					fleet = { set_variable = { which = "AssConstructionTime" value = 180 } }
					set_ship_flag = "ass_op_sm_battleship_assembly_yards"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing battleship_assembly_yards at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

ass_stage1_sm_cruiser_assembly_yards = {
	if = {
		limit = {
			has_spaceport_module = cruiser_assembly_yards
			owner = {
				any_owned_planet = {
					ass_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = cruiser_assembly_yards }
					can_build_spaceport_module = cruiser_assembly_yards
				}
			}
		}
		owner = {
			random_owned_planet = {
				limit = {
					ass_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = cruiser_assembly_yards }
					can_build_spaceport_module = cruiser_assembly_yards
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost" value = 400 } }
					fleet = { set_variable = { which = "AssConstructionTime" value = 360 } }
					set_ship_flag = "ass_op_sm_cruiser_assembly_yards"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing cruiser_assembly_yards at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

ass_stage1_sm_orbital_mind_control_laser = {
	if = {
		limit = {
			has_spaceport_module = orbital_mind_control_laser
			owner = {
				any_owned_planet = {
					ass_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = orbital_mind_control_laser }
					can_build_spaceport_module = orbital_mind_control_laser
				}
			}
		}
		owner = {
			random_owned_planet = {
				limit = {
					ass_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = orbital_mind_control_laser }
					can_build_spaceport_module = orbital_mind_control_laser
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost" value = 400 } }
					fleet = { set_variable = { which = "AssOperationCostInfluence" value = 10 } }
					fleet = { set_variable = { which = "AssConstructionTime" value = 360 } }
					set_ship_flag = "ass_op_sm_orbital_mind_control_laser"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing orbital_mind_control_laser at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

ass_stage1_sm_fleet_academy = {
	if = {
		limit = {
			has_spaceport_module = fleet_academy
			owner = {
				any_owned_planet = {
					ass_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = fleet_academy }
					can_build_spaceport_module = fleet_academy
				}
			}
		}
		owner = {
			random_owned_planet = {
				limit = {
					ass_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = fleet_academy }
					can_build_spaceport_module = fleet_academy
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost" value = 400 } }
					fleet = { set_variable = { which = "AssConstructionTime" value = 360 } }
					set_ship_flag = "ass_op_sm_fleet_academy"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing fleet_academy at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

ass_stage1_sm_destroyer_assembly_yards = {
	if = {
		limit = {
			has_spaceport_module = destroyer_assembly_yards
			owner = {
				any_owned_planet = {
					ass_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = destroyer_assembly_yards }
					can_build_spaceport_module = destroyer_assembly_yards
				}
			}
		}
		owner = {
			random_owned_planet = {
				limit = {
					ass_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = destroyer_assembly_yards }
					can_build_spaceport_module = destroyer_assembly_yards
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost" value = 300 } }
					fleet = { set_variable = { which = "AssConstructionTime" value = 360 } }
					set_ship_flag = "ass_op_sm_destroyer_assembly_yards"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing destroyer_assembly_yards at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

ass_stage1_sm_corvette_assembly_yards = {
	if = {
		limit = {
			has_spaceport_module = corvette_assembly_yards
			owner = {
				any_owned_planet = {
					ass_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = corvette_assembly_yards }
					can_build_spaceport_module = corvette_assembly_yards
				}
			}
		}
		owner = {
			random_owned_planet = {
				limit = {
					ass_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = corvette_assembly_yards }
					can_build_spaceport_module = corvette_assembly_yards
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost" value = 100 } }
					fleet = { set_variable = { which = "AssConstructionTime" value = 270 } }
					set_ship_flag = "ass_op_sm_corvette_assembly_yards"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing corvette_assembly_yards at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

ass_stage1_sm_synchronized_defenses = {
	if = {
		limit = {
			has_spaceport_module = synchronized_defenses
			owner = {
				any_owned_planet = {
					ass_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = synchronized_defenses }
					can_build_spaceport_module = synchronized_defenses
				}
			}
		}
		owner = {
			random_owned_planet = {
				limit = {
					ass_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = synchronized_defenses }
					can_build_spaceport_module = synchronized_defenses
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost" value = 150 } }
					fleet = { set_variable = { which = "AssConstructionTime" value = 180 } }
					set_ship_flag = "ass_op_sm_synchronized_defenses"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing synchronized_defenses at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

ass_stage1_sm_hydroponic_farms = {
	if = {
		limit = {
			has_spaceport_module = hydroponic_farms
			owner = {
				any_owned_planet = {
					ass_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = hydroponic_farms }
					can_build_spaceport_module = hydroponic_farms
				}
			}
		}
		owner = {
			random_owned_planet = {
				limit = {
					ass_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = hydroponic_farms }
					can_build_spaceport_module = hydroponic_farms
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost" value = 100 } }
					fleet = { set_variable = { which = "AssConstructionTime" value = 180 } }
					set_ship_flag = "ass_op_sm_hydroponic_farms"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing hydroponic_farms at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

ass_stage1_sm_engineering_bay = {
	if = {
		limit = {
			has_spaceport_module = engineering_bay
			owner = {
				any_owned_planet = {
					ass_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = engineering_bay }
					can_build_spaceport_module = engineering_bay
				}
			}
		}
		owner = {
			random_owned_planet = {
				limit = {
					ass_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = engineering_bay }
					can_build_spaceport_module = engineering_bay
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost" value = 100 } }
					fleet = { set_variable = { which = "AssConstructionTime" value = 180 } }
					set_ship_flag = "ass_op_sm_engineering_bay"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing engineering_bay at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

ass_stage1_sm_observatory = {
	if = {
		limit = {
			has_spaceport_module = observatory
			owner = {
				any_owned_planet = {
					ass_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = observatory }
					can_build_spaceport_module = observatory
				}
			}
		}
		owner = {
			random_owned_planet = {
				limit = {
					ass_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = observatory }
					can_build_spaceport_module = observatory
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost" value = 100 } }
					fleet = { set_variable = { which = "AssConstructionTime" value = 180 } }
					set_ship_flag = "ass_op_sm_observatory"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing observatory at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

ass_stage1_sm_crew_quarters = {
	if = {
		limit = {
			has_spaceport_module = crew_quarters
			owner = {
				any_owned_planet = {
					ass_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = crew_quarters }
					can_build_spaceport_module = crew_quarters
				}
			}
		}
		owner = {
			random_owned_planet = {
				limit = {
					ass_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = crew_quarters }
					can_build_spaceport_module = crew_quarters
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost" value = 100 } }
					fleet = { set_variable = { which = "AssConstructionTime" value = 180 } }
					set_ship_flag = "ass_op_sm_crew_quarters"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing crew_quarters at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

ass_stage1_sm_solar_panel = {
	if = {
		limit = {
			has_spaceport_module = solar_panel_network
			owner = {
				any_owned_planet = {
					ass_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = solar_panel_network }
					can_build_spaceport_module = solar_panel_network
				}
			}
		}
		owner = {
			random_owned_planet = {
				limit = {
					ass_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = solar_panel_network }
					can_build_spaceport_module = solar_panel_network
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost" value = 75 } }
					fleet = { set_variable = { which = "AssConstructionTime" value = 180 } }
					set_ship_flag = "ass_op_sm_solar_panel"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing solar_panel_network at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}


ass_stage4_sm_build_solar_panel = {
	switch = {
		trigger = has_ship_flag
		ass_op_sm_slot_1 = { event_target:ass_target = { set_spaceport_module = { module = "solar_panel_network" slot = 1 } } }
		ass_op_sm_slot_2 = { event_target:ass_target = { set_spaceport_module = { module = "solar_panel_network" slot = 2 } } }
		ass_op_sm_slot_3 = { event_target:ass_target = { set_spaceport_module = { module = "solar_panel_network" slot = 3 } } }
		ass_op_sm_slot_4 = { event_target:ass_target = { set_spaceport_module = { module = "solar_panel_network" slot = 4 } } }
		ass_op_sm_slot_5 = { event_target:ass_target = { set_spaceport_module = { module = "solar_panel_network" slot = 5 } } }
		ass_op_sm_slot_6 = { event_target:ass_target = { set_spaceport_module = { module = "solar_panel_network" slot = 6 } } }
	}
}
ass_stage4_sm_build_crew_quarters = {
	switch = {
		trigger = has_ship_flag
		ass_op_sm_slot_1 = { event_target:ass_target = { set_spaceport_module = { module = "crew_quarters" slot = 1 } } }
		ass_op_sm_slot_2 = { event_target:ass_target = { set_spaceport_module = { module = "crew_quarters" slot = 2 } } }
		ass_op_sm_slot_3 = { event_target:ass_target = { set_spaceport_module = { module = "crew_quarters" slot = 3 } } }
		ass_op_sm_slot_4 = { event_target:ass_target = { set_spaceport_module = { module = "crew_quarters" slot = 4 } } }
		ass_op_sm_slot_5 = { event_target:ass_target = { set_spaceport_module = { module = "crew_quarters" slot = 5 } } }
		ass_op_sm_slot_6 = { event_target:ass_target = { set_spaceport_module = { module = "crew_quarters" slot = 6 } } }
	}
}
ass_stage4_sm_build_observatory = {
	switch = {
		trigger = has_ship_flag
		ass_op_sm_slot_1 = { event_target:ass_target = { set_spaceport_module = { module = "observatory" slot = 1 } } }
		ass_op_sm_slot_2 = { event_target:ass_target = { set_spaceport_module = { module = "observatory" slot = 2 } } }
		ass_op_sm_slot_3 = { event_target:ass_target = { set_spaceport_module = { module = "observatory" slot = 3 } } }
		ass_op_sm_slot_4 = { event_target:ass_target = { set_spaceport_module = { module = "observatory" slot = 4 } } }
		ass_op_sm_slot_5 = { event_target:ass_target = { set_spaceport_module = { module = "observatory" slot = 5 } } }
		ass_op_sm_slot_6 = { event_target:ass_target = { set_spaceport_module = { module = "observatory" slot = 6 } } }
	}
}
ass_stage4_sm_build_engineering_bay = {
	switch = {
		trigger = has_ship_flag
		ass_op_sm_slot_1 = { event_target:ass_target = { set_spaceport_module = { module = "engineering_bay" slot = 1 } } }
		ass_op_sm_slot_2 = { event_target:ass_target = { set_spaceport_module = { module = "engineering_bay" slot = 2 } } }
		ass_op_sm_slot_3 = { event_target:ass_target = { set_spaceport_module = { module = "engineering_bay" slot = 3 } } }
		ass_op_sm_slot_4 = { event_target:ass_target = { set_spaceport_module = { module = "engineering_bay" slot = 4 } } }
		ass_op_sm_slot_5 = { event_target:ass_target = { set_spaceport_module = { module = "engineering_bay" slot = 5 } } }
		ass_op_sm_slot_6 = { event_target:ass_target = { set_spaceport_module = { module = "engineering_bay" slot = 6 } } }
	}
}
ass_stage4_sm_build_hydroponic_farms = {
	switch = {
		trigger = has_ship_flag
		ass_op_sm_slot_1 = { event_target:ass_target = { set_spaceport_module = { module = "hydroponic_farms" slot = 1 } } }
		ass_op_sm_slot_2 = { event_target:ass_target = { set_spaceport_module = { module = "hydroponic_farms" slot = 2 } } }
		ass_op_sm_slot_3 = { event_target:ass_target = { set_spaceport_module = { module = "hydroponic_farms" slot = 3 } } }
		ass_op_sm_slot_4 = { event_target:ass_target = { set_spaceport_module = { module = "hydroponic_farms" slot = 4 } } }
		ass_op_sm_slot_5 = { event_target:ass_target = { set_spaceport_module = { module = "hydroponic_farms" slot = 5 } } }
		ass_op_sm_slot_6 = { event_target:ass_target = { set_spaceport_module = { module = "hydroponic_farms" slot = 6 } } }
	}
}
ass_stage4_sm_build_synchronized_defenses = {
	switch = {
		trigger = has_ship_flag
		ass_op_sm_slot_1 = { event_target:ass_target = { set_spaceport_module = { module = "synchronized_defenses" slot = 1 } } }
		ass_op_sm_slot_2 = { event_target:ass_target = { set_spaceport_module = { module = "synchronized_defenses" slot = 2 } } }
		ass_op_sm_slot_3 = { event_target:ass_target = { set_spaceport_module = { module = "synchronized_defenses" slot = 3 } } }
		ass_op_sm_slot_4 = { event_target:ass_target = { set_spaceport_module = { module = "synchronized_defenses" slot = 4 } } }
		ass_op_sm_slot_5 = { event_target:ass_target = { set_spaceport_module = { module = "synchronized_defenses" slot = 5 } } }
		ass_op_sm_slot_6 = { event_target:ass_target = { set_spaceport_module = { module = "synchronized_defenses" slot = 6 } } }
	}
}
ass_stage4_sm_build_corvette_assembly_yards = {
	switch = {
		trigger = has_ship_flag
		ass_op_sm_slot_1 = { event_target:ass_target = { set_spaceport_module = { module = "corvette_assembly_yards" slot = 1 } } }
		ass_op_sm_slot_2 = { event_target:ass_target = { set_spaceport_module = { module = "corvette_assembly_yards" slot = 2 } } }
		ass_op_sm_slot_3 = { event_target:ass_target = { set_spaceport_module = { module = "corvette_assembly_yards" slot = 3 } } }
		ass_op_sm_slot_4 = { event_target:ass_target = { set_spaceport_module = { module = "corvette_assembly_yards" slot = 4 } } }
		ass_op_sm_slot_5 = { event_target:ass_target = { set_spaceport_module = { module = "corvette_assembly_yards" slot = 5 } } }
		ass_op_sm_slot_6 = { event_target:ass_target = { set_spaceport_module = { module = "corvette_assembly_yards" slot = 6 } } }
	}
}
ass_stage4_sm_build_destroyer_assembly_yards = {
	switch = {
		trigger = has_ship_flag
		ass_op_sm_slot_1 = { event_target:ass_target = { set_spaceport_module = { module = "destroyer_assembly_yards" slot = 1 } } }
		ass_op_sm_slot_2 = { event_target:ass_target = { set_spaceport_module = { module = "destroyer_assembly_yards" slot = 2 } } }
		ass_op_sm_slot_3 = { event_target:ass_target = { set_spaceport_module = { module = "destroyer_assembly_yards" slot = 3 } } }
		ass_op_sm_slot_4 = { event_target:ass_target = { set_spaceport_module = { module = "destroyer_assembly_yards" slot = 4 } } }
		ass_op_sm_slot_5 = { event_target:ass_target = { set_spaceport_module = { module = "destroyer_assembly_yards" slot = 5 } } }
		ass_op_sm_slot_6 = { event_target:ass_target = { set_spaceport_module = { module = "destroyer_assembly_yards" slot = 6 } } }
	}
}
ass_stage4_sm_build_fleet_academy = {
	switch = {
		trigger = has_ship_flag
		ass_op_sm_slot_1 = { event_target:ass_target = { set_spaceport_module = { module = "fleet_academy" slot = 1 } } }
		ass_op_sm_slot_2 = { event_target:ass_target = { set_spaceport_module = { module = "fleet_academy" slot = 2 } } }
		ass_op_sm_slot_3 = { event_target:ass_target = { set_spaceport_module = { module = "fleet_academy" slot = 3 } } }
		ass_op_sm_slot_4 = { event_target:ass_target = { set_spaceport_module = { module = "fleet_academy" slot = 4 } } }
		ass_op_sm_slot_5 = { event_target:ass_target = { set_spaceport_module = { module = "fleet_academy" slot = 5 } } }
		ass_op_sm_slot_6 = { event_target:ass_target = { set_spaceport_module = { module = "fleet_academy" slot = 6 } } }
	}
}
ass_stage4_sm_build_orbital_mind_control_laser = {
	switch = {
		trigger = has_ship_flag
		ass_op_sm_slot_1 = { event_target:ass_target = { set_spaceport_module = { module = "orbital_mind_control_laser" slot = 1 } } }
		ass_op_sm_slot_2 = { event_target:ass_target = { set_spaceport_module = { module = "orbital_mind_control_laser" slot = 2 } } }
		ass_op_sm_slot_3 = { event_target:ass_target = { set_spaceport_module = { module = "orbital_mind_control_laser" slot = 3 } } }
		ass_op_sm_slot_4 = { event_target:ass_target = { set_spaceport_module = { module = "orbital_mind_control_laser" slot = 4 } } }
		ass_op_sm_slot_5 = { event_target:ass_target = { set_spaceport_module = { module = "orbital_mind_control_laser" slot = 5 } } }
		ass_op_sm_slot_6 = { event_target:ass_target = { set_spaceport_module = { module = "orbital_mind_control_laser" slot = 6 } } }
	}
}
ass_stage4_sm_build_cruiser_assembly_yards = {
	switch = {
		trigger = has_ship_flag
		ass_op_sm_slot_1 = { event_target:ass_target = { set_spaceport_module = { module = "cruiser_assembly_yards" slot = 1 } } }
		ass_op_sm_slot_2 = { event_target:ass_target = { set_spaceport_module = { module = "cruiser_assembly_yards" slot = 2 } } }
		ass_op_sm_slot_3 = { event_target:ass_target = { set_spaceport_module = { module = "cruiser_assembly_yards" slot = 3 } } }
		ass_op_sm_slot_4 = { event_target:ass_target = { set_spaceport_module = { module = "cruiser_assembly_yards" slot = 4 } } }
		ass_op_sm_slot_5 = { event_target:ass_target = { set_spaceport_module = { module = "cruiser_assembly_yards" slot = 5 } } }
		ass_op_sm_slot_6 = { event_target:ass_target = { set_spaceport_module = { module = "cruiser_assembly_yards" slot = 6 } } }
	}
}
ass_stage4_sm_build_battleship_assembly_yards = {
	switch = {
		trigger = has_ship_flag
		ass_op_sm_slot_1 = { event_target:ass_target = { set_spaceport_module = { module = "battleship_assembly_yards" slot = 1 } } }
		ass_op_sm_slot_2 = { event_target:ass_target = { set_spaceport_module = { module = "battleship_assembly_yards" slot = 2 } } }
		ass_op_sm_slot_3 = { event_target:ass_target = { set_spaceport_module = { module = "battleship_assembly_yards" slot = 3 } } }
		ass_op_sm_slot_4 = { event_target:ass_target = { set_spaceport_module = { module = "battleship_assembly_yards" slot = 4 } } }
		ass_op_sm_slot_5 = { event_target:ass_target = { set_spaceport_module = { module = "battleship_assembly_yards" slot = 5 } } }
		ass_op_sm_slot_6 = { event_target:ass_target = { set_spaceport_module = { module = "battleship_assembly_yards" slot = 6 } } }
	}
}
