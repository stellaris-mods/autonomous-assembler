###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###


# AI Assemblers are event locked when they are built, and
# must remain event locked forever to prevent the AI ordering
# the ship around (hopefully - I have not tested this).
ass_stage3_lock_ship = {
	if = { limit = { owner = { is_ai = no } }
		fleet = { set_event_locked = yes }
	}
}

# THIS = ship
# ass_target = fleet/system/planet (you need to set this)
ass_init_stage3 = {
	ass_init_stage3_3rd = yes

	# 1. Are we in orbit, or close enough to it?
	ass_verify_failure_conditions = yes

	# 2. Lock fleet
	ass_stage3_lock_ship = yes

	# 2. Does the operation cost anything
	if = { limit = { ass_is_operation_free = no }
		# Need to invoke this before ass_account_update_ship
		owner = { ass_account_update_empire = yes }
		# Need to invoke this before ass_can_afford
		ass_account_update_ship = yes
	}

	# 3. Do we need to wait for more cash?
	if = {
		limit = {
			ass_is_operation_free = no
			ass_can_afford = no
		}
		# We can't afford to build, so fall back to on_monthly_pulse
		# to check for ass_can_afford.
		assdbg_resource_wait = yes
		set_ship_flag = "ass_waiting_for_cash"
		ass_set_fleet_name = yes

		else = {
			# We can afford to build (or the operation is free),
			# so start operation immediately
			ass_stage3_build = yes
		}
	}
}

# In this effect, ass_can_afford is always true, or the operation is free
ass_stage3_build = {
	if = { limit = { ass_is_operation_free = no }
		ass_account_grabdatcash = yes
	}

	switch = {
		trigger = has_ship_flag
		ass_op_spaceport_modules = { ass_stage3_start_construction = yes }
		ass_op_energy   = { ass_stage3_start_construction = yes }
		ass_op_minerals = { ass_stage3_start_construction = yes }
		ass_op_research = { ass_stage3_start_construction = yes }
		ass_op_military = { ass_stage3_start_construction = yes }
		ass_op_wormhole = { ass_stage3_start_construction = yes }
		ass_op_marker   = { ass_stage3_marker_arrived = yes }
		ass_op_dock     = { ass_stage3_reached_dock = yes }
	}

	ass_stage3_build_3rd = yes
}

# Invoked every 10 days for active assemblers during an operation.
# The first invocation might be slightly delayed, because it starts
# recurring by an on_monthly_pulse that checks if the country has
# any assemblers.
# ROOT is the ship.
ass_stage3_constructing = {
	if = {
		limit = { fleet = { check_variable = { which = "AssConstructionTime" value > 0 } } }
		fleet = { subtract_variable = { which = "AssConstructionTime" value = 10.1 } }
	}
	if = {
		limit = { fleet = { check_variable = { which = "AssConstructionTime" value < 1 } } }
		remove_ship_flag = "ass_constructing_station"
		ass_stage4_construction_complete = yes
	}
}

ass_stage3_start_construction = {
	if = { limit = { fleet = { check_variable = { which = "AssConstructionTime" value = 0 } } }
		log = "[this.GetName]: No construction time set, using default 100."
		fleet = { set_variable = { which = "AssConstructionTime" value = 100 } }
	}
	if = { limit = { has_global_flag = "debug" }
		fleet = { divide_variable = { which = "AssConstructionTime" value = 10 } }
	}
	remove_ship_flag = "ass_waiting_for_cash"
	set_ship_flag = "ass_constructing_station"
	log = "[this.GetName]: Assembling ([fleet.AssConstructionTime] days) ..."
	ass_set_fleet_name = yes
	ship_event = { id = assRecurring.1 }
}
