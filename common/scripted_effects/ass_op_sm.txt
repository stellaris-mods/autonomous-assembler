###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###


# During stage 1, ROOT is always the assembler ship
ass_stage1_sm_p2 = {
	# Find the planet
	if = {
		limit = { owner = { any_owned_planet = { ass_is_blueprint_planet = yes } } }
		owner = { # Ship owner
			random_owned_planet = {
				limit = { ass_is_blueprint_planet = yes }
				# We found the blueprint, now find any planet missing a module
				ass_stage1_sm_3rd_pre = yes
				ass_stage1_sm_vanilla = yes
				ass_stage1_sm_3rd_post = yes
			}
		}

		if = {
			limit = {
				has_ship_flag = "ass_op_spaceport_modules"
				# ZZZ Validate all data that a 3rd party addon might fuck up
				# ZZZ before we actually go ahead with the mission.
				fleet = { check_variable = { which = "AssConstructionTime" value > 0 } }
				exists = event_target:ass_target
				event_target:ass_target = {
					ass_valid_spaceport_module_planet = yes
				}
			}

			# Find the slot we can use
			# This "cant" fail, because all ass_stage1_sm_ effects check
			# has_free_spaceport_module_slot = yes.

			# Check 3rd party mods first
			ass_stage1_sm_3rd_set_slot = yes
			# And check vanilla slots, if necessary
			if = { limit = { ass_sm_found_any_slot = no }
				ass_stage1_sm_set_slot = yes
			}

			if = { limit = { ass_sm_found_any_slot = yes }
				event_target:ass_target = {
					# Set relation target
					ass_relation_flag_planet = yes

					# Deduct discounts from totals
					ROOT = { ass_discounts_set_spaceport_module_cost = yes }

					# And lets go
					ass_stage2_planet_move = yes
				}
				else = {
					# We can't use ass_relation_invalidate because we're not actually related yet.
					event_target:ass_target = {
						set_timed_planet_flag = {
							flag = "ass_error"
							days = 720 # Use a longer error flag than normal
						}
					}
					# This shouldn't happen unless some 3rd party mod forgot
					# can_build_spaceport_module / has_free_spaceport_module_slot
					log = "[this.GetName]: ERROR: Should build a spaceport module, but found no valid slot in the target planet."
					ass_stage4_remove_spaceport_module_data = yes
					remove_ship_flag = "ass_op_spaceport_modules"
				}
			}
			else = {
				# We are not going on a spaceport module mission
				# This might be because a 3rd party addon didnt set the
				# required ass_target stuff properly.
				# We can't use ass_stage4_abort_operation, just clean up
				# whatever we might have set thus far.
				if = {
					limit = { exists = event_target:ass_target }
					# We can't use ass_relation_invalidate because we're not actually related yet.
					event_target:ass_target = {
						set_timed_planet_flag = {
							flag = "ass_error"
							days = 720 # Use a longer error flag than normal
						}
					}
				}
				if = {
					limit = { has_ship_flag = "ass_op_spaceport_modules" }
					log = "[this.GetName]: ERROR: Should build a spaceport module, but our target isn't valid for some reason, so abort."
					ass_stage4_remove_spaceport_module_data = yes
					remove_ship_flag = "ass_op_spaceport_modules"
				}
			}
		}
	}
}

# THIS is the ship
ass_stage1_sm_set_slot = {
	event_target:ass_target = {
		if = { limit = { is_spaceport_module_slot_free = 1 }
			PREV = { set_ship_flag = "ass_op_sm_slot_1" }
			set_spaceport_module = { module = "ass_spaceport_module" slot = 1 }
		else = { if = { limit = { is_spaceport_module_slot_free = 2 }
			PREV = { set_ship_flag = "ass_op_sm_slot_2" }
			set_spaceport_module = { module = "ass_spaceport_module" slot = 2 }
		else = { if = { limit = { is_spaceport_module_slot_free = 3 }
			PREV = { set_ship_flag = "ass_op_sm_slot_3" }
			set_spaceport_module = { module = "ass_spaceport_module" slot = 3 }
		else = { if = { limit = { is_spaceport_module_slot_free = 4 }
			PREV = { set_ship_flag = "ass_op_sm_slot_4" }
			set_spaceport_module = { module = "ass_spaceport_module" slot = 4 }
		else = { if = { limit = { is_spaceport_module_slot_free = 5 }
			PREV = { set_ship_flag = "ass_op_sm_slot_5" }
			set_spaceport_module = { module = "ass_spaceport_module" slot = 5 }
		else = { if = { limit = { is_spaceport_module_slot_free = 6 }
			PREV = { set_ship_flag = "ass_op_sm_slot_6" }
			set_spaceport_module = { module = "ass_spaceport_module" slot = 6 }
		}}}}}}}}}}}
	}
}

# Root and this = ship
# And we are in orbit, or the mission failed.
ass_stage4_complete_spaceport_module = {
	event_target:ass_target = {
		remove_spaceport_module = ass_spaceport_module
	}
	set_ship_flag = "ass_op_sm_build"

	# Check 3rd party implementors first
	ass_stage4_sm_3rd_build_pre = yes

	if = { limit = { has_ship_flag = "ass_op_sm_build" }
		ass_stage4_complete_build_vanilla = yes
	}

	if = { limit = { has_ship_flag = "ass_op_sm_build" }
		ass_stage4_sm_3rd_build_post = yes
	}

	# Did any effects build the module?
	if = { limit = { has_ship_flag = "ass_op_sm_build" }
		log = "ERROR: Instructed to build a spaceport module, but there was no effect that produced any."
		remove_ship_flag = "ass_op_sm_build"
		# Module was not built, we need to abort so that we
		# refund the player and mark the planet ass_error.
		ass_stage4_abort_operation = yes

		else = {
			# Module was built successfully, so complete mission.
			# Reset relation_flag
			event_target:ass_target = {
				assdbg_relation_removed = yes
				set_variable = { which = "AssUUID" value = 0 }
				remove_planet_flag = "ass_target"
			}
			remove_ship_flag = "ass_relation_planet"
			# Ready for new adventures!
			ass_stage4_operation_complete = yes
		}
	}
}

ass_stage4_complete_build_vanilla = {
	switch = {
		trigger = has_ship_flag
		ass_op_sm_battleship_assembly_yards  = { ass_stage4_sm_build_battleship_assembly_yards = yes }
		ass_op_sm_cruiser_assembly_yards     = { ass_stage4_sm_build_cruiser_assembly_yards = yes }
		ass_op_sm_orbital_mind_control_laser = { ass_stage4_sm_build_orbital_mind_control_laser = yes }
		ass_op_sm_fleet_academy              = { ass_stage4_sm_build_fleet_academy = yes }
		ass_op_sm_destroyer_assembly_yards   = { ass_stage4_sm_build_destroyer_assembly_yards = yes }
		ass_op_sm_corvette_assembly_yards    = { ass_stage4_sm_build_corvette_assembly_yards = yes }
		ass_op_sm_synchronized_defenses      = { ass_stage4_sm_build_synchronized_defenses = yes }
		ass_op_sm_hydroponic_farms           = { ass_stage4_sm_build_hydroponic_farms = yes }
		ass_op_sm_engineering_bay            = { ass_stage4_sm_build_engineering_bay = yes }
		ass_op_sm_observatory                = { ass_stage4_sm_build_observatory = yes }
		ass_op_sm_crew_quarters              = { ass_stage4_sm_build_crew_quarters = yes }
		ass_op_sm_solar_panel                = { ass_stage4_sm_build_solar_panel = yes }
	}
}

# Remove any data associated exclusively with the spaceport module operation
ass_stage4_remove_spaceport_module_data = {
	remove_ship_flag = "ass_op_sm_battleship_assembly_yards"
	remove_ship_flag = "ass_op_sm_cruiser_assembly_yards"
	remove_ship_flag = "ass_op_sm_orbital_mind_control_laser"
	remove_ship_flag = "ass_op_sm_fleet_academy"
	remove_ship_flag = "ass_op_sm_destroyer_assembly_yards"
	remove_ship_flag = "ass_op_sm_corvette_assembly_yards"
	remove_ship_flag = "ass_op_sm_synchronized_defenses"
	remove_ship_flag = "ass_op_sm_hydroponic_farms"
	remove_ship_flag = "ass_op_sm_engineering_bay"
	remove_ship_flag = "ass_op_sm_observatory"
	remove_ship_flag = "ass_op_sm_crew_quarters"
	remove_ship_flag = "ass_op_sm_solar_panel"

	# It's easier to switch on a flag than a variable
	remove_ship_flag = "ass_op_sm_slot_1"
	remove_ship_flag = "ass_op_sm_slot_2"
	remove_ship_flag = "ass_op_sm_slot_3"
	remove_ship_flag = "ass_op_sm_slot_4"
	remove_ship_flag = "ass_op_sm_slot_5"
	remove_ship_flag = "ass_op_sm_slot_6"
	remove_ship_flag = "ass_op_sm_slot_7"
	remove_ship_flag = "ass_op_sm_slot_8"
	remove_ship_flag = "ass_op_sm_slot_9"
	remove_ship_flag = "ass_op_sm_slot_10"
	remove_ship_flag = "ass_op_sm_slot_11" # AlphaMod
	remove_ship_flag = "ass_op_sm_slot_12"
	remove_ship_flag = "ass_op_sm_slot_13"
	remove_ship_flag = "ass_op_sm_slot_14"
	remove_ship_flag = "ass_op_sm_slot_15"
	remove_ship_flag = "ass_op_sm_slot_16"
	remove_ship_flag = "ass_op_sm_slot_17"
	remove_ship_flag = "ass_op_sm_slot_18"
	remove_ship_flag = "ass_op_sm_slot_19" # TheRenegade Spaceports Extended

	remove_ship_flag = "ass_op_sm_build"

	ass_stage4_sm_3rd_remove_data = yes
}

# Operation has been forcefully aborted while we were constructing,
# so we need to remove the ass_spaceport_module from our target.
# THIS = ship
ass_stage4_abort_spaceport_module = {
	# The problem is, we don't know what our target is at this point,
	# because our ship could be dead, our planet could be lost, or whatever.
	# So we need to just find any owned planet that has the module,
	# and does NOT have an ass_target flag, and nuke it.
	owner = {
		every_owned_planet = {
			limit = {
				has_spaceport = yes
				NOT = { has_planet_flag = "ass_target" }
				has_spaceport_module = ass_spaceport_module
			}
			remove_spaceport_module = ass_spaceport_module
		}
	}
}

ass_verify_pre_spaceport_module = {
	if = { limit = { event_target:ass_target = { ass_is_still_sm_valid = no } }
		log = "[this.GetName]: ERROR: Our target planet is no longer valid for spaceport module construction."
		ass_stage4_abort_operation = yes
		break = yes
	}
}
