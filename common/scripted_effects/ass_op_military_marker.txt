###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###

ass_stage1_marker_p1 = {
	owner = {
		if = {
			limit = {
				has_technology = "tech_ass_hexagon"
				any_owned_fleet = {
					ass_is_station_marker = yes
				}
			}
			random_owned_fleet = {
				limit = { ass_is_station_marker = yes }
				ROOT = {
					set_ship_flag = "ass_op_marker"
					# the cost of this operation is in the marker
				}
				log = "[Root.GetName]: Moving to [this.GetName] (Station Marker)"
				ass_relation_flag_fleet = yes
				ass_stage2_fleet_move = yes
			}
		}
	}
}

# ass_target is a fleet, and not a ship.
ass_stage4_complete_marker = {
	event_target:ass_target = {
		remove_fleet_flag = "ass_target"
	}
	# Clear relation flags and mark operation complete
	remove_ship_flag = "ass_relation_fleet"
	ass_stage4_operation_complete = yes
}

# In this effect, we set ass_target to a ship inside the fleet, so we can easily
# switch on has_component.
ass_stage3_marker_arrived = {
	assdbg_marker_arrived = yes
	PREVPREVPREV = {
		set_fleet_flag = "ass_marker_used" # Marker used up
		random_owned_ship = { # fleet ships
			save_event_target_as = ass_target
		}
	}
	event_target:ass_target = {
		switch = {
			trigger = has_component
			ASS_TYPE_SMALL = {
				ass_military_spawn_placeholders_50 = yes
			}
			ASS_TYPE_MEDIUM = {
				ass_military_spawn_placeholders_50 = yes
			}
			ASS_TYPE_LARGE = {
				ass_military_spawn_placeholders_80 = yes
			}
			ASS_TYPE_XLARGE = {
				ass_military_spawn_placeholders_80 = yes
			}
		}
	}

	ass_stage3_marker_arrived_3rd = yes

	fleet = { set_variable = { which = "AssConstructionTime" value = 85 } }
	ass_stage3_start_construction = yes
}

# ZZZ
# The following log lines demonstrate why we can't rely on event targets
# in delayed event chains. So that's why we use the relation flag to
# locate the military marker again in immediate.

# log = "[ass_target.GetName]: Spawning military station after 85 days."
# 34. Big Bazoom: Spawning military station after 85 days.
# 34. Big Bazoom: Spawning military station after 85 days.
# 34. Big Bazoom: Spawning military station after 85 days.
# 34. Big Bazoom: Spawning military station after 85 days.
# 34. Big Bazoom: Spawning military station after 85 days.
# 34. Big Bazoom: Spawning military station after 85 days.
# 34. : Spawning military station after 85 days.
#
# Name is missing on the last one there, because the event target has
# been reset for some weird reason. They're just not reliable over
# chained days=X events.

# Jeez has_ambient_object_flag can't be used inside any_ambient_object
# or any_system_ambient_object. What the fuck is that about.
ass_stage3_marker_build = {
	log = "[this.GetName]: Spawning military station at marker [ass_target.GetName] after 85 days."
	solar_system = {
		random_system_ambient_object = {
			limit = { has_ambient_object_flag = "ass_spawn_here" }
			PREVPREV = { set_ship_flag = "ass_spawned_marker_station" }
			create_fleet = {
				effect = {
					set_owner = PREVPREVPREV.owner
					set_location = PREV
					set_fleet_flag = "ass_spawned_from_marker"
				}
			}
			destroy_ambient_object = THIS
		}
	}

	# We need this ship flag because the any_*ambient_object triggers dont work,
	# and I want to support any random number of ass_spawn_here objects.
	if = {
		limit = { has_ship_flag = "ass_spawned_marker_station" }
		remove_ship_flag = "ass_spawned_marker_station"

		event_target:ass_target = {
			random_owned_ship = {
				switch = {
					trigger = has_component
					ASS_TYPE_XLARGE = { last_created_fleet = { nsc_create_battle_fortress = yes } }
					ASS_TYPE_LARGE  = { last_created_fleet = { create_ship = { name = random random_existing_design = military_station_large } } }
					ASS_TYPE_MEDIUM = { last_created_fleet = { create_ship = { name = random random_existing_design = military_station_medium } } }
					ASS_TYPE_SMALL  = { last_created_fleet = { create_ship = { name = random random_existing_design = military_station_small } } }
				}
				ass_stage3_marker_build_3rd = yes
			}
		}

		# Yes, we chain it even if there are none left to build.
		# That's why it's 85 days and not 100.
		fleet = { set_variable = { which = "AssConstructionTime" value = 85 } }
		ass_stage3_start_construction = yes

		else = {
			# We are done.
			ass_stage4_complete_marker = yes
		}
	}
}
