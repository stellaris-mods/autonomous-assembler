###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###


ass_stage1_set_wormhole = {
	ROOT = {
		set_ship_flag = "ass_op_wormhole"
		ass_discounts_set_wormhole_station_cost = yes
	}
}

# Wormhole stations do not require survey data.
# They don't require borders either, but let's not get crazy.

ass_stage1_wormhole_p1 = {
	# Find any colonized system missing a wormhole station
	closest_system = {
		limit = {
			ass_system_valid = yes
			NOT = { has_star_flag = "ass_target" }
			is_inside_border = ROOT.owner
			any_planet = { ass_is_owners_planet = yes }
			ass_is_friendly_system = yes
			NOT = {
				any_ship_in_system = {
					is_ship_class = shipclass_wormhole_station
					exists = owner
					owner = { is_same_value = ROOT.owner }
				}
			}
		}
		ass_stage1_set_wormhole = yes
		log = "[Root.GetName]: Moving to system [this.GetName] (Wormhole P1)"
		ass_relation_flag_system = yes
		ass_stage2_system_move = yes
	}
}

# tech 3, it's 65+65 = 130
ass_stage1_wormhole_p2_gen3 = {
	owner = {
		random_owned_planet = {
			closest_system = {
				limit = {
					ass_check_wormhole_p2 = yes
					# There is a system within 64 that has a wormhole station
					any_system = {
						ass_has_wormhole_in_system = yes
						distance = {
							source = PREV
							max_distance = 129
						}
					}
				}
				ass_stage1_set_wormhole = yes
				log = "[Root.GetName]: Moving to system [this.GetName] (Wormhole P2 Gen3)"
				ass_relation_flag_system = yes
				ass_stage2_system_move = yes
			}
		}
	}
}

# At tech 2, 65*1.5=97.5
ass_stage1_wormhole_p2_gen2 = {
	owner = {
		random_owned_planet = {
			closest_system = {
				limit = {
					ass_check_wormhole_p2 = yes
					# There is a system within 64 that has a wormhole station
					any_system = {
						ass_has_wormhole_in_system = yes
						distance = {
							source = PREV
							max_distance = 96
						}
					}
				}
				ass_stage1_set_wormhole = yes
				log = "[Root.GetName]: Moving to system [this.GetName] (Wormhole P2 Gen2)"
				ass_relation_flag_system = yes
				ass_stage2_system_move = yes
			}
		}
	}
}

# FTL_RANGE_WORMHOLE = 65
ass_stage1_wormhole_p2_gen1 = {
	owner = {
		random_owned_planet = {
			closest_system = {
				limit = {
					ass_check_wormhole_p2 = yes
					# There is a system within 64 that has a wormhole station
					any_system = {
						ass_has_wormhole_in_system = yes
						distance = {
							source = PREV
							max_distance = 64
						}
					}
				}
				ass_stage1_set_wormhole = yes
				log = "[Root.GetName]: Moving to system [this.GetName] (Wormhole P2 Gen1)"
				ass_relation_flag_system = yes
				ass_stage2_system_move = yes
			}
		}
	}
}

# This thing probably isn't cheap to run :-P
# I really should optimize it, but not for now.
ass_stage1_wormhole_p2 = {
	# We need to find a solar system that is barely accessible.
	# Find any system more than 60 distance from a wormhole station
	owner = {
		switch = {
			trigger = has_technology
			tech_wormhole_generation_3 = { ROOT = { ass_stage1_wormhole_p2_gen3 = yes } }
			tech_wormhole_generation_2 = { ROOT = { ass_stage1_wormhole_p2_gen2 = yes } }
			tech_wormhole_generation_1 = { ROOT = { ass_stage1_wormhole_p2_gen1 = yes } }
		}
	}
}

# Root and this = ship
# And we are in the target system, or the mission failed.
ass_stage4_complete_wormhole = {
	# assShip.1000 checks both fleet and solar system
	# XXX but it does not verify that we are still in the same system

	# Reset relation_flag
	remove_ship_flag = "ass_relation_system"
	fleet = {
		solar_system = {
			assdbg_relation_removed = yes
			set_variable = { which = "AssUUID" value = 0 }
			remove_star_flag = "ass_target"
		}
	}

	# ZZZ Easier to position than create_wormhole_station
	create_fleet = {
		effect = {
			set_owner = ROOT.owner
			create_ship = {
				name = random
				random_existing_design = wormhole_station
			}
			set_location = {
				target = PREV
				distance = 10
				angle = random
			}
		}
	}

	# Ready for new adventures!
	ass_stage4_operation_complete = yes
}
