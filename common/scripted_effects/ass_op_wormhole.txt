
ass_stage1_set_wormhole = {
	PREV = {
		set_ship_flag = "ass_wormhole"
		ass_accounting_set_wormhole_station_cost = yes
	}
}

ass_stage1_wormhole_p1 = {
	# Find any colonized system missing a wormhole station
	closest_system = {
		limit = {
			NOT = { has_star_flag = "ass_target" }
			is_inside_border = ROOT.owner
			any_planet = { ass_is_owners_planet = yes }
			ass_is_friendly_system = yes
			NOT = {
				any_ship_in_system = {
					is_ship_class = shipclass_wormhole_station
					exists = owner
					owner = { is_same_value = ROOT.owner }
				}
			}
		}
		ass_stage1_set_wormhole = yes
		log = "[Prev.GetName]: Moving to system [this.GetName] (Wormhole P1)"
		ass_stage2_system_move = yes
	}
}

# FTL_RANGE_WORMHOLE = 65
ass_stage1_wormhole_p2 = {
	# Find any system more than 60 distance from a wormhole station
	closest_system = {
		limit = {
			NOT = { has_star_flag = "ass_target" }
			is_inside_border = ROOT.owner
			# No wormhole station in this system
			NOT = {
				any_ship_in_system = {
					is_ship_class = shipclass_wormhole_station
					exists = owner
					owner = { is_same_value = ROOT.owner }
				}
			}
			# No system close to us with a wormhole station
			NOT = {
				any_system = {
					any_ship_in_system = {
						exists = owner
						is_ship_class = shipclass_wormhole_station
						owner = { is_same_value = ROOT.owner }
					}
					distance = {
						source = PREV
						max_distance = 60
					}
				}
			}
		}
		ass_stage1_set_wormhole = yes
		log = "[Prev.GetName]: Moving to system [this.GetName] (Wormhole P2)"
		ass_stage2_system_move = yes
	}
}

# Root and this = ship
# And we are in the target system, or the mission failed.
ass_stage4_wormhole_complete = {
	# Reset relation_flag
	remove_ship_flag = "ass_relation_system"
	fleet = {
		solar_system = {
			log = "[root.GetName]: Removing system relation to [this.GetName]."
			set_variable = { which = "AssUUID" value = 0 }
			remove_star_flag = "ass_target"

			# XXX Try simply making a new fleet and a wormhole_station ship.
			# XXX Because that would allow us to put it near our assembler.
			create_wormhole_station = {
				owner = ROOT.owner
				angle = random
			}
		}
	}

	# Ready for new adventures!
	ass_op_complete = yes
}
