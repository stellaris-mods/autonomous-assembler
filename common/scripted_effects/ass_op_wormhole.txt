
ass_stage1_set_wormhole = {
	PREV = {
		set_ship_flag = "ass_op_wormhole"
		ass_accounting_set_wormhole_station_cost = yes
	}
}

# Wormhole stations do not require survey data.
# They don't require borders either, but let's not get crazy.

ass_stage1_wormhole_p1 = {
	# Find any colonized system missing a wormhole station
	closest_system = {
		limit = {
			ass_system_valid = yes
			NOT = { has_star_flag = "ass_target" }
			is_inside_border = ROOT.owner
			any_planet = { ass_is_owners_planet = yes }
			ass_is_friendly_system = yes
			NOT = {
				any_ship_in_system = {
					is_ship_class = shipclass_wormhole_station
					exists = owner
					owner = { is_same_value = ROOT.owner }
				}
			}
		}
		ass_stage1_set_wormhole = yes
		log = "[Prev.GetName]: Moving to system [this.GetName] (Wormhole P1)"
		ass_mark_system = yes
		ass_stage2_system_move = yes
	}
}

# tech 3, it's 65+65 = 130
ass_stage1_wormhole_p2_gen3 = {
	closest_system = {
		limit = {
			ass_system_valid = yes
			NOT = { has_star_flag = "ass_target" }
			ass_is_friendly_system = yes
			ass_can_build_wormhole = yes
			# No wormhole station in this system
			ass_has_wormhole_in_system = no
			# There is a system within 55-65 that has a wormhole station
			any_system = {
				# And we own it. This "prevents" the P2 wormhole operation from
				# spreading across the galaxy.
				exists = space_owner
				space_owner = { is_same_value = ROOT.owner }
				ass_has_wormhole_in_system = yes
				distance = {
					source = PREV
					max_distance = 129
					min_distance = 120
				}
			}
			# But not any closer than that
			NOT = {
				any_system = {
					ass_has_wormhole_in_system = yes
					distance = {
						source = PREV
						max_distance = 119.9
					}
				}
			}
		}
		ass_stage1_set_wormhole = yes
		log = "[Prev.GetName]: Moving to system [this.GetName] (Wormhole P2 Gen3)"
		ass_mark_system = yes
		ass_stage2_system_move = yes
	}
}

# At tech 2, 65*1.5=97.5
ass_stage1_wormhole_p2_gen2 = {
	closest_system = {
		limit = {
			ass_system_valid = yes
			NOT = { has_star_flag = "ass_target" }
			ass_is_friendly_system = yes
			ass_can_build_wormhole = yes
			# No wormhole station in this system
			ass_has_wormhole_in_system = no
			# There is a system within 87.5-96.5 that has a wormhole station
			any_system = {
				# And we own it. This "prevents" the P2 wormhole operation from
				# spreading across the galaxy.
				exists = space_owner
				space_owner = { is_same_value = ROOT.owner }
				ass_has_wormhole_in_system = yes
				distance = {
					source = PREV
					max_distance = 96.5
					min_distance = 87.5
				}
			}
			# But not any closer than that
			NOT = {
				any_system = {
					ass_has_wormhole_in_system = yes
					distance = {
						source = PREV
						max_distance = 87.4
					}
				}
			}
		}
		ass_stage1_set_wormhole = yes
		log = "[Prev.GetName]: Moving to system [this.GetName] (Wormhole P2 Gen2)"
		ass_mark_system = yes
		ass_stage2_system_move = yes
	}
}

# FTL_RANGE_WORMHOLE = 65
ass_stage1_wormhole_p2_gen1 = {
	closest_system = {
		limit = {
			ass_system_valid = yes
			NOT = { has_star_flag = "ass_target" }
			ass_is_friendly_system = yes
			ass_can_build_wormhole = yes
			# No wormhole station in this system
			ass_has_wormhole_in_system = no
			# There is a system within 55-65 that has a wormhole station
			any_system = {
				# And we own it. This "prevents" the P2 wormhole operation from
				# spreading across the galaxy.
				exists = space_owner
				space_owner = { is_same_value = ROOT.owner }
				ass_has_wormhole_in_system = yes
				distance = {
					source = PREV
					max_distance = 64
					min_distance = 55
				}
			}
			# But not any closer than that
			NOT = {
				any_system = {
					ass_has_wormhole_in_system = yes
					distance = {
						source = PREV
						max_distance = 54.9
					}
				}
			}
		}
		ass_stage1_set_wormhole = yes
		log = "[Prev.GetName]: Moving to system [this.GetName] (Wormhole P2 Gen1)"
		ass_mark_system = yes
		ass_stage2_system_move = yes
	}
}

# This thing probably isn't cheap to run :-P
# I really should optimize it, but not for now.
ass_stage1_wormhole_p2 = {
	# We need to find a solar system that is barely accessible.
	# Find any system more than 60 distance from a wormhole station
	owner = {
		switch = {
			trigger = has_technology
			tech_wormhole_generation_3 = { PREV = { ass_stage1_wormhole_p2_gen3 = yes } }
			tech_wormhole_generation_2 = { PREV = { ass_stage1_wormhole_p2_gen2 = yes } }
			tech_wormhole_generation_1 = { PREV = { ass_stage1_wormhole_p2_gen1 = yes } }
		}
	}
}

# Root and this = ship
# And we are in the target system, or the mission failed.
ass_stage4_wormhole_complete = {
	# Reset relation_flag
	remove_ship_flag = "ass_relation_system"
	fleet = {
		solar_system = {
			log = "[root.GetName]: Removing system relation to [this.GetName]."
			set_variable = { which = "AssUUID" value = 0 }
			remove_star_flag = "ass_target"
		}
	}

	# ZZZ Easier to position than create_wormhole_station
	create_fleet = {
		effect = {
			set_owner = ROOT.owner
			create_ship = {
				name = random
				random_existing_design = wormhole_station
			}
			set_location = {
				target = PREV
				distance = 10
				angle = random
			}
		}
	}

	# Ready for new adventures!
	ass_op_complete = yes
}
