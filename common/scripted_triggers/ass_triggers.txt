###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###


ass_system_valid = {
	NOT = { has_star_flag = "ass_error" }
}
ass_planet_valid = {
	NOT = { has_planet_flag = "ass_error" }
}
ass_fleet_valid = {
	NOT = { has_fleet_flag = "ass_error" }
}

# ZZZ If you change this trigger, then please check ass_check_wormhole_p2
ass_is_friendly_system = {
	has_access_fleet = ROOT.owner # XXX testing
	NOT = {
		any_ship_in_system = {
			exists = owner
			exists = fleet
			owner = {
				is_hostile = ROOT.owner
			}
		}
	}
}

ass_has_operation = {
	fleet = {
		has_fleet_flag = "autonomous_operation"
	}
}

ass_is_owners_planet = {
	exists = owner
	exists = controller
	is_colony = yes
	is_occupied_flag = no # Try to keep away from trouble
	has_ground_combat = no
	controller = { is_same_value = ROOT.owner }
	owner = { is_same_value = ROOT.owner }
}

# FLEET contains these variables:
# AssOperationCost, the total mineral cost of the current target operation
# AssReserve, how many minerals the country wants to reserve
# AssMinerals, how many minerals the country has in total
#
# Whether we can afford an operation depends on if
# AssMinerals > (AssReserve + AssOperationCost)
#
# Before using ass_can_afford, make sure you run ass_update_total_cost
# on the ship, which sums the above calculation to AssMinimum.
#
ass_can_afford = {
	fleet = {
		check_variable = { which = "AssMinerals" value > "AssMinimum" }
	}
}
