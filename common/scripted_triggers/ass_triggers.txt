
ass_system_valid = {
	NOT = { has_star_flag = "ass_error" }
}
ass_planet_valid = {
	NOT = { has_planet_flag = "ass_error" }
}
ass_fleet_valid = {
	NOT = { has_fleet_flag = "ass_error" }
}

ass_is_friendly_system = {
	has_access_fleet = ROOT.owner # XXX testing
	NOT = {
		any_ship_in_system = {
			exists = owner
			exists = fleet
			owner = {
				is_hostile = ROOT.owner
			}
		}
	}
}

ass_has_operation = {
	fleet = {
		has_fleet_flag = "autonomous_operation"
	}
}

ass_is_owners_planet = {
	exists = owner
	exists = controller
	is_colony = yes
	is_occupied_flag = no # Try to keep away from trouble
	has_ground_combat = no
	controller = { is_same_value = ROOT.owner }
	owner = { is_same_value = ROOT.owner }
}

# FLEET contains these variables:
# AssOperationCost, the total mineral cost of the current target operation
# AssReserve, how many minerals the country wants to reserve
# AssMinerals, how many minerals the country has in total
#
# Whether we can afford an operation depends on if
# AssMinerals > (AssReserve + AssOperationCost)
#
# Before using ass_can_afford, make sure you run ass_update_total_cost
# on the ship, which sums the above calculation to AssMinimum.
#
ass_can_afford = {
	fleet = {
		check_variable = { which = "AssMinerals" value > "AssMinimum" }
	}
}
